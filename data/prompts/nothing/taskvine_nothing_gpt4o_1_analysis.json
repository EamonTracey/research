{
    "system": "You are a helpful TaskVine coding assistant. Provide strictly the requested code using the ndcctools.taskvine library.",
    "prompts": [
        {
            "id": "taskvine0",
            "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\".",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine application\napp = vine.Application()\n\n# Define the task to get the current date\ntask = vine.Task(command=\"date > current_date\")\n\n# Add the task to the application\napp.add_task(task)\n\n# Run the application\napp.run()\n```",
            "analysis": "The program uses a nonexistent Application class rather than the Manager class. The task is instantiated correctly. The task is submitted using add_task rather than submit_task. The program calls app.run which has no analogous method. The task does not declare an output file."
        },
        {
            "id": "taskvine1",
            "content": "Write a Python TaskVine application to count the number of times the keywords \"wealth\", \"nation\", \"labour\", \"price\", \"nature\", and \"commodity\" appear in Adam Smith's Wealth of Nations. The text is available at \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\".",
            "response": "```python\nimport ndcctools.taskvine as vine\nimport requests\n\n# Download the text of \"Wealth of Nations\"\nurl = \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\"\nresponse = requests.get(url)\ntext = response.text\n\n# Save the text to a file\nwith open(\"wealth_of_nations.txt\", \"w\") as file:\n    file.write(text)\n\n# Keywords to search for\nkeywords = [\"wealth\", \"nation\", \"labour\", \"price\", \"nature\", \"commodity\"]\n\n# Create a TaskVine application\napp = vine.Application()\n\n# Function to create a task for each keyword\ndef create_count_task(keyword):\n    task = vine.Task(command=f\"grep -o -i '\\\\b{keyword}\\\\b' wealth_of_nations.txt | wc -l\")\n    task.set_name(f\"count_{keyword}\")\n    return task\n\n# Add tasks to the application\nfor keyword in keywords:\n    task = create_count_task(keyword)\n    app.add_task(task)\n\n# Run the application\napp.run()\n\n# Collect and print the results\nfor keyword in keywords:\n    task = app.get_task_by_name(f\"count_{keyword}\")\n    count = task.stdout.strip()\n    print(f\"The keyword '{keyword}' appears {count} times.\")\n```",
            "analysis": "The program uses requests to fetch the URL contents rather than declare_url. The program uses a nonexistent set_name method on Task and uses a nonexistent Application class rather than Manager. The task is instantiated correctly but the input file is not declared. The program uses nonexistent methods get_task_by_name and stdout rather than std_ouptut."
        },
        {
            "id": "taskvine2",
            "content": "Write a Python TaskVine application to run my program \"script.sh\" with various input arguments and organizes all output data. \"script.sh\" takes, as input, an integer and two files. \"script.sh\" outputs a file named \"output{i}.txt\" where \"{i}\" is the input integer. The application must run \"script.sh\" with input integers 1-1000 and input files \"file1.input\" and \"file2.input\" which are stored in the directory \"script_inputs\". The application must store all output files in a directory named \"script_outputs\".",
            "response": "```python\nimport os\nfrom ndcctools.taskvine import Manager, Task\n\n# Create the output directory if it doesn't exist\noutput_dir = \"script_outputs\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Initialize the TaskVine manager\nmanager = Manager()\n\n# Define the input files\ninput_file1 = \"script_inputs/file1.input\"\ninput_file2 = \"script_inputs/file2.input\"\n\n# Add tasks to the manager\nfor i in range(1, 1001):\n    output_file = f\"output{i}.txt\"\n    task = Task(f\"./script.sh {i} {input_file1} {input_file2}\")\n    task.set_input_files([input_file1, input_file2])\n    task.set_output_files([output_file])\n    task.specify_output_file(output_file, os.path.join(output_dir, output_file))\n    manager.add_task(task)\n\n# Wait for all tasks to complete\nmanager.wait_for_all()\n```"
        },
        {
            "id": "taskvine3",
            "content": "Write a Python TaskVine application to execute a pipeline of shell scripts. I have the script \"script1.sh\" which outputs a file named \"intermediary.out\" upon completion. I also have the scripts \"script2.sh\" and \"script3.sh\"  which both accept an input file as a command line argument. \"script2.sh\" and \"script3.sh\" must both receive \"intermediary.out\" as the input. Finally, \"script2.sh\" and \"script3.sh\" output files named \"script2.out\" and \"script3.out\", respectively. Save these outputs files on the host machine. \"intermediary.out\" need not be saved to the host machine.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine application\napp = vine.Application()\n\n# Task 1: Run script1.sh\ntask1 = vine.Task(command=\"./script1.sh\")\ntask1.set_output_files([\"intermediary.out\"])\napp.add_task(task1)\n\n# Task 2: Run script2.sh with intermediary.out as input\ntask2 = vine.Task(command=\"./script2.sh intermediary.out\")\ntask2.set_input_files([\"intermediary.out\"])\ntask2.set_output_files([\"script2.out\"])\napp.add_task(task2)\n\n# Task 3: Run script3.sh with intermediary.out as input\ntask3 = vine.Task(command=\"./script3.sh intermediary.out\")\ntask3.set_input_files([\"intermediary.out\"])\ntask3.set_output_files([\"script3.out\"])\napp.add_task(task3)\n\n# Run the application\napp.run()\n```"
        },
        {
            "id": "taskvine4",
            "content": "Write a Python TaskVine application to run my GPU-accelerated program. The program binary is stored at \"./train_demo\". The program requires that the worker machine has the feature \"NVIDIA RTX 4090\". Upon completion, the program outputs \"model.tar.gz\". The output file must be saved to the host machine.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine manager\nmanager = vine.Manager()\n\n# Define the task\ntask = vine.Task(command=\"./train_demo\")\n\n# Specify the required feature for the worker\ntask.requirements.add(\"NVIDIA RTX 4090\")\n\n# Specify the output file to be saved to the host machine\ntask.output_files.add(\"model.tar.gz\")\n\n# Add the task to the manager\nmanager.add_task(task)\n\n# Wait for all tasks to complete\nmanager.wait_for_all()\n```"
        },
        {
            "id": "taskvine5",
            "content": "Write a Python TaskVine application to compile and test my project stored at \"complex_project/\". To compile the project, run the \"make all\" command in the project's root directory. Then, to test the project, run \"make test\". The compilation and test must use at most 4 cores, 1024 MB of memory, and 2048 MB of disk. Enable resource monitoring to track resource usage, but do not terminate the task if it overuses resources. When the task completes, print the task's exit code and standard output. For each resource that the task overused, print the resource and by how much it overused.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Create a TaskVine application\n    app = vine.Application()\n\n    # Enable resource monitoring\n    app.enable_resource_monitoring()\n\n    # Define the compile task\n    compile_task = vine.Task(command=\"make all\", cores=4, memory=1024, disk=2048)\n    compile_task.set_directory(\"complex_project/\")\n    app.add_task(compile_task)\n\n    # Define the test task\n    test_task = vine.Task(command=\"make test\", cores=4, memory=1024, disk=2048)\n    test_task.set_directory(\"complex_project/\")\n    app.add_task(test_task)\n\n    # Wait for tasks to complete\n    app.wait()\n\n    # Function to check resource usage\n    def check_resource_usage(task):\n        resources = [\"cores\", \"memory\", \"disk\"]\n        for resource in resources:\n            usage = task.get_resource_usage(resource)\n            limit = task.get_resource_limit(resource)\n            if usage > limit:\n                print(f\"Task {task.get_command()} overused {resource} by {usage - limit} MB\")\n\n    # Print results for compile task\n    print(\"Compile Task:\")\n    print(f\"Exit Code: {compile_task.get_exit_code()}\")\n    print(f\"Standard Output: {compile_task.get_stdout()}\")\n    check_resource_usage(compile_task)\n\n    # Print results for test task\n    print(\"Test Task:\")\n    print(f\"Exit Code: {test_task.get_exit_code()}\")\n    print(f\"Standard Output: {test_task.get_stdout()}\")\n    check_resource_usage(test_task)\n\nif __name__ == \"__main__\":\n    main()\n```"
        },
        {
            "id": "taskvine6",
            "content": "Write a Python TaskVine application that executes multiple programs with different levels of resource requirements. The two task categories must be named \"intensive\" and \"light\". The \"intensive\" tasks require 8 cores and 16 GB of memory. The \"light\" tasks require 1 core and 2 GB of memory. In the intensive category, submit 10 tasks to execute the shell script \"intensive.sh\". In the light category, submit 100 tasks to execute the shell script \"light.sh\" Print the standard output of each task upon completion.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Create a TaskVine application\n    app = vine.Application()\n\n    # Define resource requirements for intensive tasks\n    intensive_cores = 8\n    intensive_memory = 16 * 1024  # Convert GB to MB\n\n    # Define resource requirements for light tasks\n    light_cores = 1\n    light_memory = 2 * 1024  # Convert GB to MB\n\n    # Submit intensive tasks\n    for i in range(10):\n        task = vine.Task(command=\"./intensive.sh\")\n        task.set_cores(intensive_cores)\n        task.set_memory(intensive_memory)\n        app.add_task(task)\n\n    # Submit light tasks\n    for i in range(100):\n        task = vine.Task(command=\"./light.sh\")\n        task.set_cores(light_cores)\n        task.set_memory(light_memory)\n        app.add_task(task)\n\n    # Run the application\n    app.run()\n\n    # Print the standard output of each task upon completion\n    for task in app.tasks():\n        print(f\"Task {task.id} output:\")\n        print(task.stdout)\n\nif __name__ == \"__main__\":\n    main()\n```"
        },
        {
            "id": "taskvine7",
            "content": "Write a Python TaskVine application to perform matrix inversion and transposition. The matrix computations must be defined in Python functions and added to a TaskVine library called \"matrix_library\". The user must specify the size, m x n,  of the matrix and the number of matrices, i, on which to perform computation. The application must randomly generate i matrices and for each matrix, print the matrix, print the inverse matrix, and print the transposed matrix.",
            "response": "```python\nimport numpy as np\nimport ndcctools.taskvine as vine\nimport random\n\ndef generate_random_matrix(m, n):\n    return np.random.rand(m, n)\n\ndef invert_matrix(matrix):\n    if matrix.shape[0] != matrix.shape[1]:\n        raise ValueError(\"Matrix must be square to invert.\")\n    return np.linalg.inv(matrix)\n\ndef transpose_matrix(matrix):\n    return np.transpose(matrix)\n\ndef main():\n    # User inputs\n    m = int(input(\"Enter the number of rows (m): \"))\n    n = int(input(\"Enter the number of columns (n): \"))\n    i = int(input(\"Enter the number of matrices: \"))\n\n    # Create a TaskVine library\n    library = vine.Library(\"matrix_library\")\n\n    # Add functions to the library\n    library.add_function(generate_random_matrix)\n    library.add_function(invert_matrix)\n    library.add_function(transpose_matrix)\n\n    # Create a TaskVine application\n    app = vine.Application()\n\n    for _ in range(i):\n        # Generate a random matrix\n        matrix = generate_random_matrix(m, n)\n        print(\"Original Matrix:\")\n        print(matrix)\n\n        # Transpose the matrix\n        transposed_matrix = transpose_matrix(matrix)\n        print(\"Transposed Matrix:\")\n        print(transposed_matrix)\n\n        # Invert the matrix if it is square\n        if m == n:\n            try:\n                inverted_matrix = invert_matrix(matrix)\n                print(\"Inverted Matrix:\")\n                print(inverted_matrix)\n            except ValueError as e:\n                print(e)\n        else:\n            print(\"Matrix is not square, cannot invert.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
        },
        {
            "id": "taskvine8",
            "content": "Write a Python Taskvine application to fetch the titles of multiple news webpages. The webpage contents must be downloaded asynchronously using the TaskVine futures executor. Print the URL and title of each webpage in order of the completion of each task. The webpages I am interested in are \"https://abcnews.com\", \"https://apnews.com\", \"https://axios.com\", \"https://cnn.com\", \"https://nbcnews.com\", \"https://nytimes.com\", \"https://reuters.com\", \"https://washingtonpost.com\", \"https://wsj.com\".",
            "response": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nfrom ndcctools.taskvine import futures\n\n# List of URLs to fetch\nurls = [\n    \"https://abcnews.com\",\n    \"https://apnews.com\",\n    \"https://axios.com\",\n    \"https://cnn.com\",\n    \"https://nbcnews.com\",\n    \"https://nytimes.com\",\n    \"https://reuters.com\",\n    \"https://washingtonpost.com\",\n    \"https://wsj.com\"\n]\n\ndef fetch_title(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.content, 'html.parser')\n        title = soup.title.string if soup.title else 'No title found'\n        return url, title\n    except Exception as e:\n        return url, f\"Error: {str(e)}\"\n\ndef main():\n    with futures.Executor() as executor:\n        future_to_url = {executor.submit(fetch_title, url): url for url in urls}\n        \n        for future in futures.as_completed(future_to_url):\n            url, title = future.result()\n            print(f\"URL: {url}, Title: {title}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
        },
        {
            "id": "taskvine9",
            "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\". To prevent an unwanted worker from connecting to the manager, use the password stored in the file \"taskvine.password\". Further, encrypt communication between the manager and worker with SSL using the \"key.pem\" and \"certificate.pem\" files.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine manager\nmanager = vine.Manager()\n\n# Set the password for worker authentication\nmanager.set_password_file(\"taskvine.password\")\n\n# Enable SSL encryption\nmanager.set_ssl_key_file(\"key.pem\")\nmanager.set_ssl_certificate_file(\"certificate.pem\")\n\n# Create a task to get the current date\ntask = vine.Task(command=\"date > current_date\")\n\n# Add the task to the manager\nmanager.submit(task)\n\n# Wait for all tasks to complete\nmanager.wait_for_all()\n```"
        }
    ]
}
