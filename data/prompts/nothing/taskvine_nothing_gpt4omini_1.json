{
    "system": "You are a helpful TaskVine coding assistant. Provide strictly the requested code using the ndcctools.taskvine library.",
    "prompts": [
        {
            "id": "taskvine0",
            "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\".",
            "response": "```python\nfrom ndcctools.taskvine import Task, TaskVine\n\nclass GetCurrentDate(Task):\n    def run(self):\n        from datetime import datetime\n        \n        # Get the current date\n        current_date = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        \n        # Write the current date to the output file\n        with open(\"current_date\", \"w\") as file:\n            file.write(current_date)\n\nif __name__ == \"__main__\":\n    app = TaskVine()\n    app.add_task(GetCurrentDate())\n    app.run()\n```"
        },
        {
            "id": "taskvine1",
            "content": "Write a Python TaskVine application to count the number of times the keywords \"wealth\", \"nation\", \"labour\", \"price\", \"nature\", and \"commodity\" appear in Adam Smith's Wealth of Nations. The text is available at \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\".",
            "response": "```python\nimport requests\nfrom ndcctools.taskvine import Task, TaskVine\n\nclass CountKeywordsTask(Task):\n    def run(self):\n        url = \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\"\n        response = requests.get(url)\n        text = response.text.lower()\n\n        keywords = [\"wealth\", \"nation\", \"labour\", \"price\", \"nature\", \"commodity\"]\n        counts = {keyword: text.count(keyword) for keyword in keywords}\n\n        return counts\n\nif __name__ == \"__main__\":\n    task_vine = TaskVine()\n    task_vine.add_task(CountKeywordsTask())\n    results = task_vine.run()\n    print(results)\n```"
        },
        {
            "id": "taskvine2",
            "content": "Write a Python TaskVine application to run my program \"script.sh\" with various input arguments and organizes all output data. \"script.sh\" takes, as input, an integer and two files. \"script.sh\" outputs a file named \"output{i}.txt\" where \"{i}\" is the input integer. The application must run \"script.sh\" with input integers 1-1000 and input files \"file1.input\" and \"file2.input\" which are stored in the directory \"script_inputs\". The application must store all output files in a directory named \"script_outputs\".",
            "response": "```python\nimport os\nfrom ndcctools.taskvine import Task, TaskVine\n\n# Define the task to run the script\nclass RunScriptTask(Task):\n    def run(self, input_integer):\n        input_file1 = \"script_inputs/file1.input\"\n        input_file2 = \"script_inputs/file2.input\"\n        output_file = f\"script_outputs/output{input_integer}.txt\"\n        \n        # Construct the command to run the script\n        command = f\"bash script.sh {input_integer} {input_file1} {input_file2} > {output_file}\"\n        \n        # Execute the command\n        os.system(command)\n\n# Create the TaskVine application\napp = TaskVine()\n\n# Ensure the output directory exists\nos.makedirs(\"script_outputs\", exist_ok=True)\n\n# Add tasks for input integers 1 to 1000\nfor i in range(1, 1001):\n    app.add_task(RunScriptTask(), input_integer=i)\n\n# Run the application\nif __name__ == \"__main__\":\n    app.run()\n```"
        },
        {
            "id": "taskvine3",
            "content": "Write a Python TaskVine application to execute a pipeline of shell scripts. I have the script \"script1.sh\" which outputs a file named \"intermediary.out\" upon completion. I also have the scripts \"script2.sh\" and \"script3.sh\"  which both accept an input file as a command line argument. \"script2.sh\" and \"script3.sh\" must both receive \"intermediary.out\" as the input. Finally, \"script2.sh\" and \"script3.sh\" output files named \"script2.out\" and \"script3.out\", respectively. Save these outputs files on the host machine. \"intermediary.out\" need not be saved to the host machine.",
            "response": "```python\nfrom ndcctools.taskvine import TaskVine, ShellTask\n\n# Create a TaskVine application\napp = TaskVine()\n\n# Define the tasks\ntask1 = ShellTask(\"Run script1\", \"bash script1.sh\")\ntask2 = ShellTask(\"Run script2\", \"bash script2.sh intermediary.out\")\ntask3 = ShellTask(\"Run script3\", \"bash script3.sh intermediary.out\")\n\n# Specify the output files to be saved on the host machine\ntask2.output_files = [\"script2.out\"]\ntask3.output_files = [\"script3.out\"]\n\n# Set up the pipeline\napp.add_task(task1)\napp.add_task(task2, dependencies=[task1])\napp.add_task(task3, dependencies=[task1])\n\n# Run the application\nif __name__ == \"__main__\":\n    app.run()\n```"
        },
        {
            "id": "taskvine4",
            "content": "Write a Python TaskVine application to run my GPU-accelerated program. The program binary is stored at \"./train_demo\". The program requires that the worker machine has the feature \"NVIDIA RTX 4090\". Upon completion, the program outputs \"model.tar.gz\". The output file must be saved to the host machine.",
            "response": "```python\nfrom ndcctools.taskvine import TaskVine\n\n# Create a TaskVine application\napp = TaskVine()\n\n# Define the task to run the GPU-accelerated program\ntask = app.create_task(\n    command=\"./train_demo\",\n    features=[\"NVIDIA RTX 4090\"],\n    outputs=[\"model.tar.gz\"]\n)\n\n# Specify the output file to be saved to the host machine\ntask.save_output(\"model.tar.gz\", \"/path/to/save/model.tar.gz\")\n\n# Run the application\napp.run()\n```"
        },
        {
            "id": "taskvine5",
            "content": "Write a Python TaskVine application to compile and test my project stored at \"complex_project/\". To compile the project, run the \"make all\" command in the project's root directory. Then, to test the project, run \"make test\". The compilation and test must use at most 4 cores, 1024 MB of memory, and 2048 MB of disk. Enable resource monitoring to track resource usage, but do not terminate the task if it overuses resources. When the task completes, print the task's exit code and standard output. For each resource that the task overused, print the resource and by how much it overused.",
            "response": "```python\nfrom ndcctools.taskvine import Task, ResourceMonitor\n\n# Define the task to compile and test the project\ntask = Task(\n    command=\"make all && make test\",\n    working_directory=\"complex_project/\",\n    resource_limits={\n        \"cores\": 4,\n        \"memory\": 1024,  # in MB\n        \"disk\": 2048     # in MB\n    },\n    enable_resource_monitoring=True\n)\n\n# Run the task\nexit_code, stdout, resource_usage = task.run()\n\n# Print the exit code and standard output\nprint(f\"Task exit code: {exit_code}\")\nprint(\"Standard output:\")\nprint(stdout)\n\n# Check for resource overusage\nfor resource, usage in resource_usage.items():\n    if usage['used'] > usage['limit']:\n        overage = usage['used'] - usage['limit']\n        print(f\"{resource} overused by {overage} MB\")\n```"
        },
        {
            "id": "taskvine6",
            "content": "Write a Python TaskVine application that executes multiple programs with different levels of resource requirements. The two task categories must be named \"intensive\" and \"light\". The \"intensive\" tasks require 8 cores and 16 GB of memory. The \"light\" tasks require 1 core and 2 GB of memory. In the intensive category, submit 10 tasks to execute the shell script \"intensive.sh\". In the light category, submit 100 tasks to execute the shell script \"light.sh\" Print the standard output of each task upon completion.",
            "response": "```python\nfrom ndcctools.taskvine import TaskVine, Task\n\n# Initialize TaskVine\ntv = TaskVine()\n\n# Define task categories\nintensive_tasks = []\nlight_tasks = []\n\n# Create intensive tasks\nfor i in range(10):\n    task = Task(\n        name=f\"Intensive Task {i+1}\",\n        command=\"bash intensive.sh\",\n        resources={\"cores\": 8, \"memory\": \"16GB\"},\n    )\n    intensive_tasks.append(task)\n\n# Create light tasks\nfor i in range(100):\n    task = Task(\n        name=f\"Light Task {i+1}\",\n        command=\"bash light.sh\",\n        resources={\"cores\": 1, \"memory\": \"2GB\"},\n    )\n    light_tasks.append(task)\n\n# Submit tasks to TaskVine\ntv.submit(intensive_tasks)\ntv.submit(light_tasks)\n\n# Wait for tasks to complete and print output\nfor task in intensive_tasks + light_tasks:\n    result = tv.wait_for_task(task)\n    print(f\"{task.name} Output:\\n{result.stdout}\")\n```"
        },
        {
            "id": "taskvine7",
            "content": "Write a Python TaskVine application to perform matrix inversion and transposition. The matrix computations must be defined in Python functions and added to a TaskVine library called \"matrix_library\". The user must specify the size, m x n,  of the matrix and the number of matrices, i, on which to perform computation. The application must randomly generate i matrices and for each matrix, print the matrix, print the inverse matrix, and print the transposed matrix.",
            "response": "```python\nimport numpy as np\nfrom ndcctools.taskvine import TaskVine, Task\n\n# Define the matrix library\nclass MatrixLibrary:\n    @staticmethod\n    def generate_random_matrix(m, n):\n        return np.random.rand(m, n)\n\n    @staticmethod\n    def invert_matrix(matrix):\n        return np.linalg.inv(matrix)\n\n    @staticmethod\n    def transpose_matrix(matrix):\n        return np.transpose(matrix)\n\n# Define the TaskVine application\nclass MatrixComputationApp(TaskVine):\n    def __init__(self, m, n, i):\n        super().__init__()\n        self.m = m\n        self.n = n\n        self.i = i\n        self.matrix_library = MatrixLibrary()\n\n    def run(self):\n        for _ in range(self.i):\n            matrix = self.matrix_library.generate_random_matrix(self.m, self.n)\n            print(\"Original Matrix:\")\n            print(matrix)\n\n            if self.m == self.n:  # Only invert square matrices\n                inverse_matrix = self.matrix_library.invert_matrix(matrix)\n                print(\"Inverse Matrix:\")\n                print(inverse_matrix)\n            else:\n                print(\"Matrix inversion not possible for non-square matrices.\")\n\n            transposed_matrix = self.matrix_library.transpose_matrix(matrix)\n            print(\"Transposed Matrix:\")\n            print(transposed_matrix)\n\n# Example usage\nif __name__ == \"__main__\":\n    m = int(input(\"Enter the number of rows (m): \"))\n    n = int(input(\"Enter the number of columns (n): \"))\n    i = int(input(\"Enter the number of matrices (i): \"))\n    \n    app = MatrixComputationApp(m, n, i)\n    app.run()\n```"
        },
        {
            "id": "taskvine8",
            "content": "Write a Python Taskvine application to fetch the titles of multiple news webpages. The webpage contents must be downloaded asynchronously using the TaskVine futures executor. Print the URL and title of each webpage in order of the completion of each task. The webpages I am interested in are \"https://abcnews.com\", \"https://apnews.com\", \"https://axios.com\", \"https://cnn.com\", \"https://nbcnews.com\", \"https://nytimes.com\", \"https://reuters.com\", \"https://washingtonpost.com\", \"https://wsj.com\".",
            "response": "```python\nimport asyncio\nimport aiohttp\nfrom ndcctools.taskvine import futures\n\nasync def fetch_title(session, url):\n    async with session.get(url) as response:\n        html = await response.text()\n        title_start = html.find('<title>') + len('<title>')\n        title_end = html.find('</title>', title_start)\n        title = html[title_start:title_end]\n        return url, title\n\nasync def fetch_all_titles(urls):\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_title(session, url) for url in urls]\n        return await asyncio.gather(*tasks)\n\ndef main():\n    urls = [\n        \"https://abcnews.com\",\n        \"https://apnews.com\",\n        \"https://axios.com\",\n        \"https://cnn.com\",\n        \"https://nbcnews.com\",\n        \"https://nytimes.com\",\n        \"https://reuters.com\",\n        \"https://washingtonpost.com\",\n        \"https://wsj.com\"\n    ]\n\n    with futures.ThreadPoolExecutor() as executor:\n        loop = asyncio.get_event_loop()\n        results = loop.run_until_complete(fetch_all_titles(urls))\n\n        for url, title in results:\n            print(f\"{url}: {title}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
        },
        {
            "id": "taskvine9",
            "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\". To prevent an unwanted worker from connecting to the manager, use the password stored in the file \"taskvine.password\". Further, encrypt communication between the manager and worker with SSL using the \"key.pem\" and \"certificate.pem\" files.",
            "response": "```python\nimport ndcctools.taskvine as tv\nimport datetime\n\n# Load the password from the file\nwith open(\"taskvine.password\", \"r\") as f:\n    password = f.read().strip()\n\n# Define the worker function to get the current date\ndef get_current_date():\n    current_date = datetime.datetime.now().isoformat()\n    with open(\"current_date\", \"w\") as f:\n        f.write(current_date)\n\n# Create a TaskVine worker\nworker = tv.Worker(\n    password=password,\n    ssl_key=\"key.pem\",\n    ssl_cert=\"certificate.pem\"\n)\n\n# Register the worker function\nworker.register(get_current_date)\n\n# Start the worker\nworker.start()\n```"
        }
    ]
}
