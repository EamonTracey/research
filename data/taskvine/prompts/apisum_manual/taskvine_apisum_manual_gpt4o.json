{
    "system": [
        "You are a helpful TaskVine coding assistant. Provide strictly the requested code using the ndcctools.taskvine library.",
        "The TaskVine user manual is below:\nTaskVine User's Manual\nOverview\n\nTaskVine is a framework for building large scale data intensive dynamic workflows that run on high performance computing (HPC) clusters, GPU clusters, cloud service providers, and other distributed computing systems. A workflow is a collection of programs and files that are organized in a graph structure, allowing parts of the workflow to run in a parallel, reproducible way:\n\nA TaskVine workflow requires a manager and a large number of worker processes. The application generates a large number of small tasks, which are distributed to workers. As tasks access external data sources and produce their own outputs, more and more data is pulled into local storage on cluster nodes. This data is used to accelerate future tasks and avoid re-computing exisiting results. The application gradually grows \"like a vine\" through the cluster.\n\nThe TaskVine system is naturally robust. While an application is running, workers may be added or removed as computing resources become available. Newly added workers will gradually accumulate data within the cluster. Removed (or failed) workers are handled gracefully, and tasks will be retried elsewhere as needed. If a worker failure results in the loss of files, tasks will be re-executed as necessary to re-create them.\n\nTaskVine manager applications can be written in Python or C on Linux or OSX platforms. Individual tasks can be simple Python functions, complex Unix applications, or serverless function invocations. The key idea is that you declare file objects, and then declare tasks that consume them and produce new file objects. For example, this snippet draws an input file from the Project Gutenberg repository and runs a Task to search for the string \"needle\", producing the file output.txt:\n\nf = m.declare_url(\"https://www.gutenberg.org/cache/epub/2600/pg2600.txt\")\ng = m.declare_file(\"myoutput.txt\")\n\nt = Task(\"grep needle warandpeace.txt > output.txt\")\nt.add_input(f, \"warandpeace.txt\")\nt.add_output(g, \"outfile.txt\")\n\nTasks share a common set of options. Each task can be labelled with the resources (CPU cores, GPU devices, memory, disk space) that it needs to execute. This allows each worker to pack the appropriate number of tasks. For example, a worker running on a 64-core machine could run 32 dual-core tasks, 16 four-core tasks, or any other combination that adds up to 64 cores. If you don't know the resources needed, you can enable a resource monitor to automatically track, report, and allocate what each task uses.\n\nTaskVine is easy to deploy on existing HPC and cloud facilities. The worker processes are self-contained executables, and TaskVine arranges for all necessary task dependencies to be moved to workers, making the system self-hosting. Applications regularly consist of millions of tasks running on thousands of workers. Tools are provided to easily deploy workers on HTCondor, SLURM, and Grid Engine.\n\nTaskVine is our third-generation workflow system, built on our twenty years of experience creating scalable applications in fields such as high energy physics, bioinformatics, molecular dynamics, and machine learning.\nQuick Start\n\nInstalling via conda is the easiest method for most users. First, Install Miniforge if you don't already have conda installed. Then, open a terminal and install ndcctools like this:\n\nconda install -c conda-forge ndcctools\n\nUsing a text editor, create a manager program called quickstart.py like this:\n\n# quickstart.py\n\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager([9123, 9129])\nprint(f\"Listening on port {m.port}\")\n\n# Declare a common input file to be shared by multiple tasks.\nf = m.declare_url(\"https://www.gutenberg.org/cache/epub/2600/pg2600.txt\", cache=\"workflow\")\n\n# Submit several tasks using that file.\nprint(\"Submitting tasks...\")\nfor keyword in ['needle', 'house', 'water']:\n    task = vine.Task(f\"grep {keyword} warandpeace.txt | wc\")\n    task.add_input(f, \"warandpeace.txt\")\n    task.set_cores(1)\n    m.submit(task)\n\n# As they complete, display the results:\nprint(\"Waiting for tasks to complete...\")\nwhile not m.empty():\n    task = m.wait(5)\n    if task:\n        print(f\"Task {task.id} completed with result {task.output}\")\n\nprint(\"All tasks done.\")\n\nRun the manager program at the command line like this:\n\npython quickstart.py\n\nIt should display output like this:\n\nListening on port 9123\nSubmitting tasks...\nWaiting for tasks to complete...\n\nThe manager is now waiting for workers to connect and begin requesting work. (Without any workers, nothing will happen.) You can start one worker on the same machine by opening a new shell and running:\n\nvine_worker localhost 9123\n\nThe manager will send tasks to the worker for execution. As they complete, you will see output like this:\n\nTask 1 completed with result      12     139     824\nTask 3 completed with result      99    1199    6672\nTask 2 completed with result     536    6314   36667\nAll tasks done.\n\nCongratulations! You have now run a simple manager application that runs tasks on one local worker. To scale up, simply run more workers on a cluster or cloud facility.\nExample Applications\n\nThe following examples show more complex applications and various features of TaskVine:\n\n    BLAST Example\n    Gutenberg Example\n    Mosaic Example\n    Gradient Descent Example\n    Watch Files Example\n    Functional Example\n\nRead on to learn how to build applications from scratch and run large numbers of workers at scale.\nWriting a TaskVine Application\n\nA TaskVine application can be written in Python, or C. In each language, the underlying principles are the same, but there are some syntactic differences shown below. The full API documentation for each language is here:\n\n    TaskVine Python API\n    TaskVine C API\n\nCreating a Manager Object\n\nTo begin, you must import the TaskVine module, and then create a Manager object. You may specify a specific port number to listen on like this:\nPython\n\n# Import the taskvine module\nimport ndcctools.taskvine as vine\n\n# Create a new manager listening on port 9123\nm = vine.Manager(9123)\n\nC\n\nIn a shared environment, that specific port might already be in use, and so you may find it more convenient to specify zero to indicated any available port:\nPython\n\n# Create a new manager listening on any port\nm = vine.Manager(0)\nprint(f\"listening on port {m.port}\")\n\nC\nDeclaring Files\n\nEach file used in a TaskVine application must be declared to the manager, so that it can be cached and replicated within the cluster as needed. The following are examples of basic file descriptions:\nPython\n\na = m.declare_file(\"mydata.txt\")\nd = m.declare_file(\"dataset/\")\nu = m.declare_url(\"https://ftp.ncbi.nlm.nih.gov/blast/db/human_genome.00.tar.gz\")\nb = m.declare_buffer(\"These words are the contents of the file.\")\nt = m.declare_temp()\n\nC\n\ndeclare_file indicates a file in the manager's local filesystem which will be transferred into the cluster and made available to tasks. Both files and directories can be declared in this way: declare_file(\"mydata.txt\") indicates a single text file, while declare_file(\"dataset\") refers to an entire directory tree. A local file or directory can also be used as the output of a task.\n\ndeclare_url indicates a remote dataset that will be loaded as needed into the cluster. This URL can be http, https, ftp, file or any other method supported by the standard curl tool. If many tasks need the same remote URL, TaskVine is careful to limit the number of concurrent transfers, and will seek to duplicate the file within the cluster, rather than subject the source to a denial-of-service attack.\n\ndeclare_buffer indicates a literal string of data that will be presented to that task in the form of a file. A buffer with no initial data can also be used as the output of a task, made easily visible within the manager application.\n\ndeclare_temp indicates an unnamed ephemeral file that can be used to capture the output of a task, and then serve as the input of a later task. Temporary files exist only within the cluster for the duration of a workflow, and are deleted when no longer needed. This accelerates a workflow by avoiding the step of returning the data to the manager. If a temporary file is unexpectedly lost due to the crash or failure of a worker, then the task that created it will be re-executed. Temp files may also be replicated across workers to a degree set by the vine_tune parameter temp-replica-count. Temp file replicas are useful if significant work is required to re-execute the task that created it. The contents of a temporary file can be obtained with fetch_file\n\nIf it is necessary to unpack a file before it is used, use the declare_untar transformation to wrap the file definition. This will permit the unpacked version to be shared by multiple tasks at once:\nPython\n\nu = m.declare_url(\"https://ftp.ncbi.nlm.nih.gov/blast/db/human_genome.00.tar.gz\")\nx = m.declare_untar(u)\n\nC\n\ndeclare_untar is an example of a MiniTask, which is explained further below.\nDeclaring Tasks\n\nTaskVine supports several forms of tasks: Standard Tasks consist of Unix command lines, Python Tasks consist of Python functions and their dependencies, and Serverless Tasks consist of invocations of functions in remote libraries.\n\nA Standard Task consists of a Unix command line to execute and the resources needed for that task. Previously declared input and output files must be attached to the task to provide it with the necessary data.\n\nHere is an example of a task that consists of the standard Unix gzip program, which will read the file mydata and produce mydata.gz as an output:\nPython\n\nt = vine.Task(\"gzip < mydata > mydata.gz\")\nt.add_input(a, \"mydata\")\nt.add_output(b, \"mydata.gz\")\n\nC\n\nNote that each task will execute in a private sandbox at a worker. And so, each input and output file must be \"attached\" to the task under a specific name. The task will only have access to those files specifically declared, and should not assume access to a general shared filesystem.\n\nWhen the task executes, the worker will create a sandbox directory, which serves as the working directory for the task. Each of the input files and directories will be linked into the sandbox directory with the given remote names. The task should write its outputs into the current working directory, which will be extracted from the locations given in the add_output statements.\n\nThe path of the sandbox directory is exported to the execution environment of each worker through the VINE_SANDBOX shell environment variable. This shell variable can be used in the execution environment of the worker to describe and access the locations of files in the sandbox directory.\n\nWarning\n\nThe remote names given go to the files should match the names in the command line of the task.\n\nIn Python you may find it more convenient to declare a task as a dictionary.\nPython\n\nt = vine.Task(\n    command = \"./gzip < mydata > mydata.gz\",\n    input_files = {\n        a : {\n            remote_name : \"mydata\",\n            cache : False\n        }\n    },\n    output_files = {\n        b : {\n            remote_name : \"mydata.gz\",\n            cache : False\n        }\n    }\n)\n\nIn addition to describing the input and output files, you may optionally specify additional details about the task that will assist TaskVine in making good scheduling decisions.\n\nIf you are able, describe the resources needed by each task (cores, gpus, memory, disk) so that the worker can pack as many concurrent tasks. This is described in greater detail under Managing Resources.\n\nYou may also attach a tag to a task, which is just a user-defined string that describes the purpose of the task. The tag is available as t.tag when the task is complete.\nPython\n\nt.set_cores(2)\nt.set_memory(4096)\nt.set_tag(\"config-4.5.0\")\n\n# this can once again be done at task declaration as well:\n t = vine.Task(\n    command = \"./gzip < my-file > my-file.gz\",\n    cores = 2,\n    memory = 4096,\n    tag = \"config-4.5.0\"\n )\n\nC\nManaging Tasks\n\nOnce a task has been fully specified, it can be submitted to the manager. submit returns a unique taskid that can be helpful when later referring to a task:\nPython\n\ntaskid = m.submit(t)\n\nC\n\nOnce all tasks are submitted, use wait to wait until a task completes, indicating how many seconds you are willing to pause. If a task completes within that time limit, then wait will return that task object. If no task completes within the timeout, it returns null.\nPython\n\nwhile not m.empty():\n    t = m.wait(5)\n    if t:\n        print(f\"Task {t.id} has returned!\")\n\n        if t.successful():\n            print(f\"stdout:\\n{t.std_output}\")\n        if t.completed():\n            print(f\"task complete with error exit code: {t.exit_code}\")\n        else:\n            print(f\"There was a problem executing the task: {t.result}\")\n\nC\n\nA completed task will have its output files written to disk. You may examine the standard output of the task in output and the exit code in exit_status.\n\nNote\n\nThe size of standard output is limited to 1 GB. Any output beyond 1 GB will be truncated. If large output is expected, redirect the stdout ./my-command > my-stdout of the task to a file and specify the file as an output file of the task as described above.\n\nWhen you are done with the task, delete it (only needed for C):\nC\n\nvine_task_delete(t);\n\nContinue submitting and waiting for tasks until all work is complete. You may check to make sure that the manager is empty with vine_empty. When all is done, delete the manager (only needed for C):\nC\n\nvine_delete(m);\n\nFull details of all of the TaskVine functions can be found in the TaskVine API.\nRunning a TaskVine Application\n\nThere are a variety of ways to execute a TaskVine application at scale. The examples in this section make use of the example program functions.py which you can download to execute like this:\n\npython3 functions.py\n\nLanguage Specific Setup\n\nBefore running the application, you may need some additional setup, depending on the language in use:\nPython Setup\n\nIf you installed via Conda, then no further setup is needed.\n\nIf you are running a Python application and did not install via Conda, then you will need to set the PYTHONPATH to point to the cctools installation, like this:\n\n# Note: This is only needed if not using Conda:\n$ PYVER=$(python -c 'import sys; print(\"%s.%s\" % sys.version_info[:2])')\n$ export PYTHONPATH=${HOME}/cctools/lib/python${PYVER}/site-packages:${PYTHONPATH}\n\nC Language Setup\n\nIf you are writing a TaskVine application in C, you should compile it into an executable with a command like this. Note that this example assumes that CCTools has been installed using the conda method.\n\ngcc taskvine_example.c -o taskvine_example -I${CONDA_PREFIX}/include/cctools -L${CONDA_PREFIX}/lib -ltaskvine -ldttools -lm -lz\n\nRunning a Manager Program\n\nThe example application simply compresses a bunch of files in parallel. The files to be compressed must be listed on the command line. Each will be transmitted to a remote worker, compressed, and then sent back to the manager. To compress files a, b, and c with this example application, run it as:\n\n# Python:\n$ ./taskvine_example.py a b c\n\n# C\n$ ./taskvine_example a b c\n\nYou will see this right away:\n\nlistening on port 9123...\nsubmitted task: /usr/bin/gzip < a > a.gz\nsubmitted task: /usr/bin/gzip < b > b.gz\nsubmitted task: /usr/bin/gzip < c > c.gz\nwaiting for tasks to complete...\n\nThe TaskVine manager is now waiting for workers to connect and begin requesting work. (Without any workers, it will wait forever.) You can start one worker on the same machine by opening a new shell and running:\n\n# Substitute the IP or name of your machine for MACHINENAME.\n$ vine_worker MACHINENAME 9123\n\nIf you have access to other machines, you can simply ssh there and run workers as well. In general, the more workers you start, the faster the work gets done. If a worker fails, the TaskVine infrastructure will retry the work elsewhere, so it is safe to submit many workers to an unreliable system.\nSubmitting Workers to a Batch System\n\nIf you have access to a HTCondor pool, you can use this shortcut to submit ten workers at once via HTCondor:\n\n$ vine_submit_workers -T condor MACHINENAME 9123 10\n\nSubmitting job(s)..........\nLogging submit event(s)..........\n10 job(s) submitted to cluster 298.\n\nThis will cause HTCondor to schedule worker jobs on remote machines. When they begin to run, they will call home to the indicated machine and port number, and begin to service the manager application.\n\nSimilar scripts are available for other common batch systems:\n\n$ vine_submit_workers -T slurm MACHINENAME 9123 10\n$ vine_submit_workers _T uge MACHINENAME 9123 10\n\nWhen the manager completes, if the workers were not otherwise shut down, they will still be available, so you can either run another manager with the same workers, or you can remove the workers with kill, condor_rm, or qdel as appropriate. If you forget to remove them, they will exit automatically after fifteen minutes. (This can be adjusted with the -t option to worker.)\nProject Names and the Catalog Server\n\nKeeping track of the manager's hostname and port can get cumbersome, especially if there are multiple managers. To help with this, a project name can be used to identify a TaskVine manager with a human-readable name. TaskVine workers can then be started for their managers by providing the project name instead of a host an port number.\n\nThe project name feature uses the Catalog Server to maintain and track the project names of managers and their respective locations. It works as follows: the manager advertises its project name along with its hostname and port to the catalog server. TaskVine workers that are provided with the manager's project name query the catalog server to find the hostname and port of the manager with the given project name.\n\nFor example, to have a TaskVine manager advertise its project name as myproject, add the following code snippet after creating the manager:\nPython\n\nm = vine.Manager(name = \"myproject\")\n\nC\n\nTo start a worker for this manager, specify the project name (myproject) to connect in the -M option:\n\n$ vine_worker -M myproject\n\nYou can start ten workers for this manager on Condor using vine_submit_workers by providing the same option arguments.:\n\n$ vine_submit_workers -T condor -M myproject 10\nSubmitting job(s)..........\nLogging submit event(s)..........\n10 job(s) submitted to cluster 298.\n\nOr similarly on UGE using vine_submit_workers as:\n\n$ vine_submit_workers -T uge -M myproject 10\nYour job 153097 (\"worker.sh\") has been submitted\nYour job 153098 (\"worker.sh\") has been submitted\nYour job 153099 (\"worker.sh\") has been submitted\n...\n\nTaskVine Online Status Display\n\nAn additional benefit of using a project name is that you can now use the vine_status command to display the progress of your application. This shows the name, location, and statistics of each application that reports itself to the catalog server. (Note that this information is updated about once per minute.). For example:\n\n% vine_status\nPROJECT               HOST                      PORT WAITING RUNNING COMPLETE WORKERS\nmolsim-c2h2           home.cse.nd.edu           8999     793      64      791      16\nfreds-model-search    mars.indiana.edu          9123     100     700     1372     350\nyang-analysis-355     login.crc.nd.edu          9100    8932    4873    10007    4873\n\nThe same information is available in a more graphical form online at the TaskVine Online Status, which looks like this:\n\nManaging Workers with the TaskVine Factory\n\nInstead of launching each worker manually from the command line, the utility vine_factory may be used to launch workers are needed. The factory will submit and maintain a number of workers according to the tasks available in one or more managers. For example, we can supply a minimum of 2 workers and a maximum of 10 to a manager with the project name myproject via the condor batch system as follows:\n\nvine_factory -Tcondor --min-workers=2 --max-workers=10 --manager-name myproject\n\nThis arguments can be specified in a file. The factory will periodically re-read this file, which allows adjustments to the number of workers desired:\n\nConfiguration file factory.json:\n\n{\n    \"manager-name\": \"myproject\",\n    \"max-workers\": 10,\n    \"min-workers\": 2\n}\n\nvine_factory -Tcondor -Cfactory.json\n\nFor further options, please refer to the TaskVine factory manual.\n\nBy default, the factory submits as many tasks that are waiting and running up to a specified maximum. To run more than one task in a worker, please refer to the following section on describing task resources and worker resources.\n\nWe can also create a factory directly in python. Creating a factory object does not immediately launch it, so this is a good time to configure the resources, number of workers, etc. Factory objects function as Python context managers, so to indicate that a set of commands should be run with a factory running, wrap them in a with statement. The factory will be cleaned up automtically at the end of the block. As an example:\n\nworkers = vine.Factory(\"condor\", \"myproject\")\nworkers.cores = 4\nworkers.memory = 4000\nworkers.disk = 5000\nworkers.max_workers = 20\nwith workers:\n    while not m.empty():\n        t = m.wait(5)\n        ...\n\nAdvanced Data Handling\nCaching and Sharing\n\nWherever possible, TaskVine retains files (whatever their sources) within the cluster so that they can be reused by later tasks. To do this consistently, each file is given a unique cache name that is computed from its contents and metadata. This ensures that if the external source for a file changes, any old cached copies will not be reused. In addition, cached files used concurrently by multiple tasks may be transferred between workers to share them efficiently.\n\nIf necessary, you can control the caching behavior of files individually.\n\n    A cache value of task indicates that the file should be deleted as soon as it is consumed by a task. This is appropriate for input files that are specific to one task, and one task only.\n    A cache value of workflow (the default) indicates that the file should be retained as long as the workflow runs, and then deleted at the end.\n    A cache value of worker indicates that the file should be retained by the worker until the worker's end-of-life.\n    A cache value of forever indicates that the file should be retained by the worker, even across workflows. This is appropriate for widely used software packages and reference datasets. This level of cache leaves files on the execution sites even when workers terminate, thus use with care.\n\nPython\n\nf = m.declare_file(\"myfile.txt\", cache=\"task\")       # (default, same as cache=False)\nf = m.declare_file(\"myfile.txt\", cache=\"workflow\")   # (same as cache=True)\nf = m.declare_file(\"myfile.txt\", cache=\"worker\")\nf = m.declare_file(\"myfile.txt\", cache=\"forever\")\n\nC\n\nTaskVine generally assumes that a file created on one worker can always be transferred to another. It is occasionally the case that a file created on a specific worker is truly specialized to that machine and should not be transferred. (For example, if a MiniTask compiled some code specifically for the architecture of a given machine.) In that case, you should indicate that peer transfers are not permitted:\nPython\n\nf = m.declare_file(\"myfile.txt\", cache=\"task\", peer_transfer=False)\n\nC\n\nAutomatic sharing of files between workers, or peer transfers, are enabled by default in TaskVine. If communication between workers is not possible or not desired, peer transfers may be globally disabled:\nPython\n\nm.disable_peer_transfers()\n\nC\n\nIf peer transfers have been disabled, they may be re-enabled accordingly:\nPython\n\nm.enable_peer_transfers()\n\nC\n\nTransfers between workers may be impacted by transient issues which may cause intermittent transfer failures. In these situations we take note of the failure that occured, and avoid using the same worker as a source for a period of time. This time period has a default value of 15 seconds. It may be changed by the user using vine_tune with the parameter transient-error-interval.\nMiniTasks\n\nA task can be used to perform custom fetch operations for input data. TaskVine calls these tasks mini tasks, and they are defined in the same way as regular tasks. Their only differences are that they are not submitted directly to the manager, and that their output (either a file or a directory) has to be specially declared.\n\nThis gives a lot of flexibility, as say for example, say you would like to expand a compressed file that TaskVine does not natively support, or you would like the input to be the result of a query to a database.\nPython\n\n# use cpio to expand archives coming from a url\nt = Task(\"cpio -iD output_dir < archive.cpio\")\n\nmy_url = m.declare_url(\"http://somewhere.com/archive.cpio\", cache=\"workflow\")\nt.add_input(my_url, \"archive.cpio\")\n\nmini_task = m.declare_mini_task(t, \"output_dir\")\n\n# regular tasks can use the mini task as input # the output of the mini\n# task is mounted in the regular task sandbox\n\nmy_other_task = Task(\"my_cmd output_from_cpio/\")\nmy_other_task.add_input(mini_task, \"output_from_cpio\")\n\n# we submit to the manager only the regular task\nm.submit(my_other_task)\n\nC\nExecution Contexts\n\nThe execution of a task can be wrapped with specially designed packages called execution contexts. These ensure that the software dependencies for the task are available in the execution site. TaskVine natively supports two types of environments: poncho, which is based on conda-pack; and starch, a lightweight package useful when the manager and workers run the same linux version. Mini tasks can be used to create environments not natively supported, as we will show later to construct execution contexts for Apptainer (i.e., singularity containers).\nPoncho\n\nA Poncho package is a tarball based on conda-pack, and is useful to deliver a complete python execution context. For example, to create a python package containing numpy:\n\nmy_poncho_spec.json\n\n{\n    \"conda\": {\n        \"channels\": [\n            \"conda-forge\"\n        ],\n        \"dependencies\": [\n            \"python=3.10\",\n            \"numpy=1.24.2\"\n        ]\n    }\n}\n\nFrom the command line, create the poncho package like this:\n\nponcho_package_create my_poncho_spec.json my_poncho_pkg.tar.gz\n\nAttach the package to the task:\nPython\n\n# my task that requires python and numpy\nt = Task(\"python my_numpy_script.py\")\n\ns = m.declare_file(\"my_numpy_script.py\", cache=\"workflow\")\nt.add_input(s, \"my_numpy_script.py\")\n\n# declare the package and its input file\nponcho_file = m.declare_file(\"my_poncho_pkg.tar.gz\", cache=\"workflow\")\nponcho_pkg = m.declare_poncho(poncho_file, cache=\"workflow\")\n\n# attach the package to the task\nt.add_poncho_package(poncho_pkg)\n\nm.submit(t)\n\nC\nStarch\n\n(to do)\nCustom Execution Contents\n\nTaskVine expects execution contents to expand to a directory, with this minimal structure:\n\nroot\n\u2514\u2500\u2500 bin\n    \u2514\u2500\u2500 run_in_env\n\nwhere run_in_env is an executable file (usually a shell script) that takes as an argument a command line to execute. In the rest of this section we will show how to construct an execution context that runs its command line inside an Apptainer container.\nApptainer Execution Context\n\nOur script run_in_env script simply calls Apptainer with the desired image, and mounts the task's sandbox as the home directory:\n\nrun_command_in_apptainer.sh\n\n#! /bin/sh\n\n# Wrap tasks with an Apptainer container\n\n# get the directory that contains the execution context from the location of this script\nctx_dir=$(dirname $( cd -- \"$( dirname -- \"$0\" )\" > /dev/null 2>&1 && pwd ))\n\n# execute the command line with the container image \"image.img\"\nexec apptainer exec --home \"${VINE_SANDBOX:-${PWD}}\" \"${ctx_dir}/image.sif\" \"$@\"\n\nTo start, we can manually construct in the command line the needed directory structure as follows. Later we will automate these steps with a mini task.\n\n# ensure the right execution permissions for the script\nchmod 755 run_command_in_apptainer.sh\n\n# construct the needed directory structure\nmkdir -p my_ctx/bin\n\n# copy the apptainer script to the expected run_in_env location\ncp run_command_in_apptainer.sh my_ctx/bin/run_in_env\n\n# copy the desired image into the package\ncp path/to/my_image.img my_ctx/image.img\n\nNow we are ready to declare the execution context from its local directory \"my_ctx\":\nPython\n\nt = Task(\"/bin/echo from inside apptainer!\")\n\nctx = m.declare_file(\"my_ctx\", cache=\"workflow\")\nt.add_execution_context(ctx)\n\nm.submit(t)\n\nC\nApptainer Execution Cpntext From a Mini Task\n\nIn the previous section we manually built the directory structure needed for the execution context. This is not very flexible, as we need to create one such directory per container image that we would like to use. Instead, we can use a mini task to construct the execution context directly on the workers.\nPython\n\n# construct the mini task. We only need the mini task for its sandbox to\n# create the environment structure, thus we use the command \":\" as no-op.\nmt = Task(\":\")\n\nrunner = m.declare_file(\"run_command_in_apptainer.sh\", cache=\"workflow\")\nimage  = m.declare_file(\"path/to/my_image.img\", cache=\"workflow\")\n\nmt.add_input(runner, \"ctx/bin/run_in_env\")\nmt.add_input(image,  \"ctx/image.img\")\n\n# the mini task will extract the environment directory\nctx = m.declare_mini_task(mt, \"ctx\")\n\n# now we define our regular task, and attach the environment to it.\nt = Task(\"/bin/echo from inside apptainer!\")\nt.add_execution_context(ctx)\n\nm.submit(t)\n\nYou can see the complete example here.\nWatching Output Files\n\nIf you would like to see the output of a task as it is produced, add the watch flag as an argument of add_file. This will cause the worker to periodically send output appended to that file back to the manager. This is useful for a program that produces a log or progress bar as part of its output.\nPython\n\nt.add_output_file(\"my-file\", watch=True)\n\nC\nOptional Output Files\n\nIt is sometimes useful to return an output file only in the case of a failed task. For example, if your task generates a very large debugging output file debug.out, then you might not want to keep the file if the task succeeded. In this case, you can mark the file as a \"failure-only\" output to indicate that it should only be returned when the task fails:\nPython\n\nmy_debug = m.declare_file(\"debug.out\", cache=\"task\")\nt.add_output(my_debug, \"debug.out\", failure_only=True)\n\nC\n\nIn a similar way, files can be marked to indicate that they should be returned on success:\nPython\n\nmy_debug = m.declare_file(\"debug.out\", cache=\"task\")\nt.add_output(my_debug, \"debug.out\", success_only=True)\n\nC\nAdvanced Task Handling\n\nA variety of advanced features are available for programs with unusual needs or very large scales. Each feature is described briefly here, and more details may be found in the TaskVine API.\nSecurity\n\nBy default, TaskVine does not perform any encryption or authentication, so any workers will be able to connect to your manager, and vice versa. This may be fine for a short running anonymous application, but is not safe for a long running application with a public name.\n\nWe recommend that, at a minimum, you enable an application password to provide authentication between managers and workers. And, consider enabling SSL to provide communication encryption. These features can be enabled independently.\nPassword Authentication\n\nWe recommend that you enable a password for your TaskVine applications. Create a file vine.password that contains a long string of random data like this:\n\nopenssl rand -hex 32 > vine.password\n\nThis password will be particular to your application, and only managers and workers with the same password will be able to interoperator. Then, modify your manager program to use the password:\nPython\n\nm.set_password_file(\"vine.password\")\n\nC\n\nAnd give the --password option to give the same password file to your workers:\n\n$ vine_worker --password vine.password -M myproject\n\nWith this option enabled, both the manager and the workers will verify that the other has the matching password before proceeding. Likewise, when workers perform peer-to-peer transfers, the password will be verified.\n\nNote that the password is not sent in the clear, but is securely verified through a SHA1-based mutual challenge-response protocol.\nSSL Encryption\n\nTaskVine can encrypt the communication between manager and workers using SSL. For this, you need to set the key and certificate (in PEM format) of your server when creating the manager.\n\nIf you do not have a key and certificate at hand, but you want the communications to be encrypted, you can create your own key and certificate:\n\n# Be aware that since this certificate would not be signed by any authority, it\n# cannot be used to prove the identity of the server running the manager.\n\nopenssl req -x509 -newkey rsa:4096 -keyout MY_KEY.pem -out MY_CERT.pem -sha256 -days 365 -nodes\n\nTo activate SSL encryption, indicate the paths to the key and certificate when creating the manager:\nPython\n\n# Import the taskvine module\nimport ndcctools.taskvine as vine\nm = vine.Manager(port=9123, ssl=('MY_KEY.pem', 'MY_CERT.pem'))\n\n# Alternatively, you can set ssl=True and let the python API generate\n# temporary ssl credentials for the manager:\nm = vine.Manager(port=9123, ssl=True)\n\nC\n\nIf you are using a project name for your manager, then the workers will be aware that the manager is using SSL and communicate accordingly automatically. However, you are directly specifying the address of the manager when launching the workers, then you need to add the --ssl flag to the command line, as:\n\nvine_worker (... other args ...) --ssl HOST PORT\nvine_factory (... other args ...) --ssl HOST PORT\nvine_status --ssl HOST PORT\nvine_submit_workers -T condor -E'--ssl' HOST PORT\n\nMaximum Retries\n\nWhen a task cannot be completed because a worker disconnects or because it exhausted some intermediate resource allocation, it is automatically retried. By default, there is no limit on the number of retries. However, you can set a limit on the number of retries:\nPython\n\nt.set_retries(5)   # Task will be try at most 6 times (5 retries).\n\n# this can be done at task declaration as well:\n t = vine.Task(\n    command = ...,\n    retries = 5\n )\n\nC\n\nWhen a task cannot be completed in the set number of tries, then the its result is set to the result of the last attempt (e.g. \"resource exhaustion\" in python, or VINE_RESULT_RESOURCE_EXHAUSTION in C).\nPipelined Submission\n\nIf you have a very large number of tasks to run, it may not be possible to submit all of the tasks, and then wait for all of them. Instead, submit a small number of tasks, then alternate waiting and submitting to keep a constant number in the manager. The hungry will tell you if more submissions are warranted:\nPython\n\nif m.hungry():\n    # submit more tasks...\n\nC\nAutomatic Garbage Collection on Disk\n\nFor workflows that generate partial results that are not needed once a final result has been computed, TaskVine can automatically delete them from disk when the application indicates that they will not be needed anymore:\nPython\n\npartial_result = m.declare_file(\"my_partial_result\", unlink_when_done=True)\n\nt1 = Task(...)\nt1.add_output(partial_result, \"my_partial_result\")\n...\n\nt2 = Task(...)\nt2.add_input(partial_result, \"my_partial_result\")\n...\n\n# once t2 is done, the following call will remove the file from the\n# taskvine workflow. Further, when no task refers to the file, the file\n# will be removed from the manager's disk because of unlink_when_done=True\n# at its declaration.\nm.undeclare_file(partial_result)\n\nC\n\nWarning\n\nNever use this feature on files that the TaskVine application did not create. Otherwise you run the risk of removing irreplaceable input files\nDisconnect slow workers\n\nA large computation can often be slowed down by stragglers. If you have a large number of small tasks that take a short amount of time, then automatically disconnecting slow workers can help. With this feature enabled, statistics are kept on tasks execution times and statistical outliers are terminated. If two different tasks are canceled in the same worker, then the worker is disconnected and blacklisted.\nPython\n\n# Disconnect workers that are executing tasks twice as slow as compared to the average.\nm.enable_disconnect_slow_workers(2)\n\nC\n\nTasks terminated this way are automatically retried in some other worker. Each retry allows the task to run for longer times until a completion is reached. You can set an upper bound in the number of retries with Maximum Retries.\nString Interpolation\n\nIf you have workers distributed across multiple operating systems (such as Linux, Cygwin, Solaris) and/or architectures (such as i686, x86_64) and have files specific to each of these systems, this feature will help. The strings $OS and $ARCH are available for use in the specification of input file names. TaskVine will automatically resolve these strings to the operating system and architecture of each connected worker and transfer the input file corresponding to the resolved file name. For example:\nPython\n\nmy_exec = m.declare_file(\"my-executable.$OS.$ARCH\",  cache=\"workflow\")\nt.add_input_input(my_exec, \"my_exe\")\n\nC\n\nThis will transfer my-executable.Linux.x86_64 to workers running on a Linux system with an x86_64 architecture and a.Cygwin.i686 to workers on Cygwin with an i686 architecture. These files will be named \"my_exe\" in the task's sandbox, which means that the command line of the tasks does not need to change.\n\nNote this feature is specifically designed for specifying and distingushing input file names for different platforms and architectures. Also, this is different from the $VINE_SANDBOX shell environment variable that exports the location of the working directory of the worker to its execution environment.\nTask Cancellations\n\nThis feature is useful in workflows where there are redundant tasks or tasks that become obsolete as other tasks finish. Tasks can be removed either by either task_id or tag. Tasks removed in this way will still be returned in the usual way via wait with a result of VINE_RESULT_CANCELLED. For example:\nPython\n\n# create task as usual and tag it with an arbitrary string.\nt = vine.Task(...)\nt.set_tag(\"my-tag\")\n\n# or set tag in task declaration\nt = vine.Task(\n    command = ...,\n    tag = \"my-tag\"\n)\n\ntaskid = m.submit(t)\n\n# cancel task by id.\nm.cancel_by_taskid(taskid)\n\n# or cancel task by tag.\nm.cancel_by_tasktag(\"my-tag\")\n\nC\n\nNote\n\nIf several tasks have the same tag, only one of them is cancelled. If you want to cancel all the tasks with the same tag, you can use loop until cancel_by_task returns zero:\n\n    while m.cancel_by_taskid(\"my-tag\")>0:\n        pass\n\nBlocking workers\n\nYou may find that certain hosts are not correctly configured to run your tasks. The manager can be directed to ignore certain workers, as:\nPython\n\nt = m.wait(5)\n\n# if t fails given a worker misconfiguration:\nm.block_host(t.hostname)\n\nC\nPerformance Statistics\n\nThe manager tracks a fair number of statistics that count the number of tasks, number of workers, number of failures, and so forth. This information is useful to make a progress bar or other user-visible information:\nPython\n\nstats = m.stats\nprint(stats.workers_busy)\n\nC\nPython Programming Models\n\nWhen writing a manager in Python, you have access to several types of tasks that wrap around the standard task abstraction:\nPython Tasks\n\nA PythonTask is an extension of a standard task. It is not defined with a command line to execute, but with a Python function and its arguments, like this:\nPython\n\ndef my_sum(x, y):\n    return x+y\n\n# task to execute x = my_sum(1, 2)\nt = vine.PythonTask(my_sum, 1, 2)\n\nA PythonTask is handled in the same way as a standard task, except that its output t.output is simply the Python return value of the function. If the function should throw an exception, then the output will be the exception object.\n\nYou can examine the result of a PythonTask like this:\nPython\n\nwhile not m.empty():\n    t = m.wait(5)\n    if t:\n        x = t.output\n        if isinstance(x, Exception):\n            print(\"Exception: {}\".format(x))\n        else:\n            print(\"Result: {}\".format(x))\n\nA PythonTask is derived from Task and so all other methods for controlling scheduling, managing resources, and setting performance options all apply to PythonTask as well.\n\nWhen running a Python function remotely, it is assumed that the Python interpreter and libraries available at the worker correspond to the appropiate python environment for the task. If this is not the case, an environment file can be provided with t.set_environment:\nPython\n\nt = vine.PythonTask(my_sum, 1, 2)\nt.set_environment(\"my-env.tar.gz\")\n\nThe file my-env.tar.gz is a conda environment created with conda-pack. A minimal environment can be created a follows:\n\nconda create -y -p my-env python=3.8 cloudpickle conda\nconda install -y -p my-env -c conda-forge conda-pack\n# conda install -y -p my-env pip and conda install other modules, etc.\nconda run -p my-env conda-pack\n\nServerless Computing\n\nTaskVine offers a serverless computing model which is especially appropriate for invoking functions that have a relatively short execution time (10s or less) and have substantial startup time due to large numbers of libraries or dependent data.\n\nIn this model, you first define and install a LibraryTask that defines a function, and then invoke FunctionCall tasks that invoke the library by name.\n\nSuppose your main program has two functions my_sum and my_mul. Invoke create_library_from_functions to package up these function definitions into a library task libtask\nPython\n\ndef my_sum(x, y):\n    return x+y\n\ndef my_mul(x, y):\n    return x*y\n\nlibtask = m.create_library_from_functions(\"my_library\", my_sum, my_mul)\n\nWe strongly recommend to specify the modules the function needs inside the function itself. This ensures that the correct modules and their aliases will be available when the functions are executed in isolation at the worker:\n\nYou can certainly embed import statements within the function and install any necessary packages:\nPython\n\ndef divide(dividend, divisor): \n    import math \n    return dividend / math.sqrt(divisor)\n\nlibtask = m.create_library_from_functions(\"my_library\", divide)\n\nIf the overhead of importing modules per function is noticeable, modules can be optionally imported as a common preamble to the function executions. Common modules can be specified with the hoisting_modules argument to create_library_from_functions. This reduces the overhead by eliminating redundant imports:\nPython\n\nimport numpy\nimport math\n\nhoisting_modules = [numpy, math]\n\nhoisting_modules only accepts modules as arguments (e.g. it can't be used to import functions, or select particular names with from ... import ... statements. Such statements should be made inside functions after specifying the modules with hoisting_modules.\nPython\n\ndef cube(x):\n    # whenever using FromImport statments, put them inside of functions\n    from random import uniform\n    from time import sleep as time_sleep\n\n    random_delay = uniform(0.00001, 0.0001)\n    time_sleep(random_delay)\n\n    return math.pow(x, 3)\n\nAfter installing the packages and functions, you can optionally specify the number of functions the library can run concurrently by setting the number of function slots. (If unset, TaskVine will assume the library can run one function per core available.)\nPython\n\nlibtask.set_function_slots(4)   # maximum 4 concurrent functions\n\nOnce complete, the library task must be installed in the system:\nPython\n\nm.install_library(t)\n\nThis causes the library task to be dispatched and started at available workers, where it remains running. Immediately after installing the library, you may submit FunctionCall tasks that invoke the library and functions by name:\nPython\n\nt = vine.FunctionCall(\"my_library\", \"my_mul\", 20, 30);\nt.set_cores(1)\nt.set_memory(100)\nt.set_disk(100)\nm.submit(t)\n\nThe function invocation will be dispatched to available workers, and when it is returned, the result is present as t.output:\nPython\n\nt = m.wait(5)\nif t:\n    print(t.output)\n\nNote that both library tasks and function invocations consume resources at the worker, and the number of running tasks will be constrained by the available resources in the same way as normal tasks.\nStateful Serverless Computing\n\nA function typically sets up its states (e.g., load modules/packages, build internal models or states) before executing its computation. With advanced serverless computing in TaskVine, you can set up a shared state between function invocations so the cost of setting up states doesn't have to be paid for every invocation, but instead is paid once and shared many times. TaskVine supports this technique as demonstrated via the below example.\n\nAssume that you program has two functions my_sum and my_mul, and they both use base to set up a common value in their computations.\nPython\n\ndef base(x, y=1):\n    return x**y\n\nA = 2\nB = 3\n\ndef my_sum(x, y):\n    base_val = base(A, B)\n    return base_val + x+y\n\ndef my_mul(x, y):\n    base_val = base(A, B)\n    return base_val + x*y\n\nWith this setup, base(A, B) has to be called repeatedly for every function invocation of my_sum and my_mul. What you want instead is to have the value of base(A, B) created and computed once and stored in a library. my_sum and my_mul thus only have to load such value, instead of computing the value, from a library's state, as follows.\nPython\n\nfrom ndcctools.taskvine.utils import load_variable_from_library\ndef base(x, y=1):\n    return {'base_val': x**y}\n\nA = 2\nB = 3\n\ndef my_sum(x, y):\n    base_val = load_variable_from_library('base_val')\n    return base_val + x+y\n\ndef my_mul(x, y):\n    base_val = load_variable_from_library('base_val')\n    return base_val + x*y\n\nlibtask = m.create_library_from_functions(\"my_library\", my_sum, my_mul, library_context_info=[base, [A], {'y': B})\nm.install(libtask)\n# application continues as usual with submitting FunctionCalls and waiting for results.\n...\n\nThis technique enables maximum sharing between invocations of functions that share some common states, and between invocations of the same function in a library. This is especially helpful in ML/AI workloads where one has to build an ML/AI model on a remote node to best configure it against the remote node's local resources (e.g., GPU). Thus, instead of loading and creating a model for every invocation:\nPython\n\ndef infer(image):\n    # load model parameters\n    ...\n    # build model\n    model = tf.ResNet50(...)\n    # load model in GPU\n    model.to_gpu(1)\n    # execute an inference\n    return model.infer(image)\n\nOne can do this to have the model created and loaded in a GPU once and separate the model creation from the actual inference:\nPython\n\nfrom ndcctools.taskvine.utils import load_variable_from_library\ndef model_setup():\n    # load model parameters\n    ...\n    # build model\n    model = tf.ResNet50(...)\n    # load model in GPU\n    model.to_gpu(1)\n    return {'model': model}\n\ndef infer(image):\n    model = load_variable_from_library('model')\n    # execute an inference\n    return model.infer(image)\n\nlibtask = m.create_library_from_functions('infer_library',\n                                          infer,\n                                          library_context_info=[model_setup, [], {})\nm.install(libtask)\n\n# application continues as usual with submitting FunctionCalls and waiting for results.\n...\n\nFutures\n\nTaskVine provides a futures executor model which is a subclass of Python's concurrent futures executor. A function along with its arguments are submitted to the executor to be executed. A future is returned whose value will be resolved at some later point.\n\nTo create a future, a FuturesExecutor object must first be created. Tasks can then be submitted through the submit function. This will return a Future object. The result of the task can retrieved by calling future.result()\nPython\n\nimport ndcctools.taskvine as vine\n\ndef my_sum(x, y):\n    return x + y\n\nm = vine.FuturesExecutor(manager_name='my_manager')\n\na = m.submit(my_sum, 3, 4)\nb = m.submit(my_sum, 5, 2)\nc = m.submit(my_sum, a, b)  # note that the futures a and b are\n                            # passed as any other argument.\n\nprint(c.result())\n\nIf the tasks need to be configured in some way, for example to specify maximum resources allowed, the method future_task returns a FuturePythonTask that can be tailored as any other task:\nPython\n\nimport ndcctools.taskvine as vine\n\ndef my_sum(x, y):\n    return x + y\n\nm = vine.FuturesExecutor(manager_name='my_manager')\n\nt = m.future_task(my_sum, 3, 4)\nt.set_cores(1)\n\nf = m.submit(t)\n\nprint(f.result())\n\nAdditionally, the executor the Vine Factory to submit TaskVine workers. Specifications for the workers can be provided via the opts keyword argument when creating to executor.\nPython\n\n```python import ndcctools.taskvine as vine\n\ndef my_sum(x, y): return x + y\n\nopts = {\"memory\": 8000, \"disk\":8000, \"cores\":8, \"min-workers\": 5} m = vine.FuturesExecutor(manager_name='my_manager', batch_type=\"condor\", opts=opts)\n\nt = m.future_task(my_sum, 3, 4) t.set_cores(1)\n\nf = m.submit(t)\n\nprint(f.result())\n\nInstead of tasks, the futures may also executed using function calls with the future_funcall method:\nPython\n\nimport ndcctools.taskvine as vine\n\ndef my_sum(x, y):\n    return x + y\n\nm = vine.FuturesExecutor(manager_name='my_manager')\n\nlibtask = m.create_library_from_functions('test-library', my_sum)\nm.install_library(libtask)\n\nt = m.future_funcall('test-library', 'my_sum', 7, 4)\n\na = m.submit(t)\n\nprint(a.result())\n\nFunctional Abstractions\n\nThe TaskVine *map abstraction works similar to python map, as it applies a a function to every element in a list. This function works by taking in a chunk_size, which is the size of an iterable to send to a worker. The worker than maps the given function over the iterable and returns it. All the results are then combined from the workers and returned. The size of the chunk depends on the cost of the function. If the function is very cheap, then sending a larger chunk_size is better. If the function is expensive, then smaller is better. If an invalid operation happens, the error will appear in the results.\n\ndef fn(a):\n    return a*a\n\nm.map(fn, arry, chunk_size)\n\nThe TaskVine pair function computes all the pairs of 2 sequences, and then uses them as inputs of a given function. The pairs are generated locally using itertools, and then based on the given chunk_size, are sent out to a worker as an iterable of pairs. The given function must accept an iterable, as the pair will be sent to the function as a tuple. The worker will then return the results, and each result from each worker will be combined locally. Again, cheaper functions work better with larger chunk_sizes, more expensive functions work better with smaller ones. Errors will be placed in results.\n\ndef fn(pair):\n    return pair[0] * pair[1]\n\nm.pair(fn, seq1, seq2, chunk_size)\n\nThe treeReduce function combines an array using a given function by breaking up the array into chunk_sized chunks, computing the results, and returning the results to a new array. It then does the same process on the new array until there only one element left and then returns it. The given fucntion must accept an iterable, and must be an associative fucntion, or else the same result cannot be gaurenteed for different chunk sizes. Again, cheaper functions work better with larger chunk_sizes, more expensive functions work better with smaller ones. Errors will be placed in results. Also, the minimum chunk size is 2, as going 1 element at time would not reduce the array\n\ndef fn(seq):\n    return max(seq)\n\nm.treeReduce(fn, arry, chunk_size)\n\nBelow is an example of all three abstractions, and their expected output:\n\n# abstractions.py\n\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Set up queue\n    q = vine.Manager(port=9123)\n\n    # map - similar to Python's own map function, but uses a taskvine worker\n    # to complete computation. Returns sequence with the results from the given function\n    # [result] = q.map(func, sequence)\n    # Example: (returns [1, 4, 9, 16])\n    results = q.map(lambda x: x*x, [1, 2, 3, 4])\n    print(results)\n\n    # pair - similar to map function, but uses the function for every pair between\n    # the two sequences. Returns sequence of results of each pair.\n    # [result] = q.pair(func, sequence1, sequence2)\n    # Example: (returns [1, 2, 3, 4, 2, 4, 6, 8, 3, 6, 9, 12, 4, 8, 12, 16])\n    results = q.pair(lambda x, y: x*y, [1, 2, 3, 4], [1, 2, 3, 4])\n    print(results)\n\n    # tree_reduce - combines pairs of values using a given function, and then returns\n    # to a single final number after reducing the sequence.\n    # result = q.tree_reduce(func, sequence)\n    # Example (even): (returns 24)\n    results = q.tree_reduce(lambda x, y: x*y, [1, 2, 3, 4])\n    print(results)\n\n    # Example (odd): (returns 120)\n    results = q.tree_reduce(lambda x, y: x*y, [1, 2, 3, 4, 5])\n    print(results)\n\n\nif __name__ == \"__main__\":\n    main()\n\nRun:\n\npython abstractions.py\n\nExpected output:\n\nMap: [2, 4, 6, 8]\nPair: [2, 4, 6, 8, 4, 8, 12, 16, 6, 12, 18, 24, 8, 18, 24, 32]\nTree: 8\n\nManaging Resources\n\nUnless otherwise specified, TaskVine assumes that a single task runs on a single worker at a time, and a single worker occupies an entire machine.\n\nHowever, if the resources at a machine are larger than what you know a task requires, you most likely will want one worker to manage multiple tasks running on that machine. For example, if you have a 8-core machine, then you might want to run four 2-core tasks on a single worker at once, being careful not to exceed the available memory and disk.\nTask Resources\n\nTo run several tasks in a worker, every task must have a description of the resources it uses, in terms of cores, memory, disk, and gpus. While time is not exactly a type of resource, specifying the running time of tasks can often be helpful to map tasks to workers. These resources can be specified as in the following example:\nPython\n\nt.set_cores(1)           # task needs one core\nt.set_memory(1024)       # task needs 1024 MB of memory\nt.set_disk(4096)         # task needs 4096 MB of disk space\nt.set_gpus(0)            # task does not need a gpu\nt.set_time_max(100)      # task is allowed to run in 100 seconds\nt.set_time_min(10)       # task needs at least 10 seconds to run (see vine_worker --wall-time option above)\nt.add_feature(\"NVIDIA RTX A2000\")  # task requires this specific GPU type\n\n# these can be set when the task is declared as well:\n t = vine.Task(\n    command = \"./gzip < my-file > my-file.gz\",\n    cores = 1,\n    memory = 1024,\n    disk = 4096,\n    gpus = 0,\n    time_max = 100,\n    time_min = 10\n)\n\nC\n\nWhen the maximum running time is specified, TaskVine will kill any task that exceeds its maximum running time. The minimum running time, if specified, helps TaskVine decide which worker best fits which task. Specifying tasks' running time is especially helpful in clusters where workers may have a hard threshold of their running time.\n\nResources are allocated according to the following rules:\n\n    If the task does not specify any resources, then it is allocated a whole worker.\n    The task will be allocated as least as much of the value of the resources specified. E.g., a task that specifies two cores will be allocated at least two cores.\n    If gpus remain unspecified, then the task is allocated zero gpus.\n    If a task specifies gpus, but does not specify cores, then the task is allocated zero cores.\n    In all other cases, cores, memory, and disk of the worker are divided evenly according to the maximum proportion of specified task requirements over worker resources. The proportions are rounded up so that only whole number of tasks could fit in the worker.\n\nAs an example, consider a task that only specifies 1 core, and does not specify any other resource, and a worker with 4 cores, 12 GB of memory, and 36 GB of disk. According to the rules above:\n\n    Rule 1 does not apply, as at least one resource (cores) was specified.\n    According to rule 2, the task will get at least one core.\n    According to rule 3, the task will not be allocated any gpus.\n    Rule 4 does not apply, as no gpus were specified, and cores were specified.\n    For rule 5, the task requires 1 core, and the worker has 4 cores. This gives a proportion of 1/4=0.25. Thus, the task is assigned 25% of the memory and disk (3 GB and 9 GB respectively).\n\nAs another example, now assume that the task specifies 1 cores and 6 GB of memory:\n\n    Rules 1 to 4 are as the last example, only that now the task will get at least 6 GB of memory.\n    From cores we get a proportion of 1/4=0.25, and from memory 6GB/12GB=0.5. The memory proportion dictates the allocation as it is the largest. This means that the task will get assigned 50% of the cores (2), memory (6 GB), and disk (18 GB).\n\nNote that proportions are 'rounded up', as the following example shows. Consider now that the task requires 1 cores, 6GB of memory, and 27 GB of disk:\n\n    Rules 1 to 4 are as before, only that now the worker will get at least 30 GB of disk.\n    The proportions are 1/4=0.25 for cores, 6GB/12GB=0.5 for memory, and 27GB/36GB=0.75 for disk. This would assign 3 cores, 9 memory, and 27 to the task. However, this would mean that no other task of this size would be able to run in the worker. Rather than assign 75% of the resources and risk an preventable failure because of resource exhaustion, the task is assigned 100% of the resources from the worker. More generally, allocations are rounded up so that only a whole number of tasks can be fit in the worker.\n\nNote\n\nIf you want TaskVine to exactly allocate the resources you have specified, use m.disable_proportional_resources() (see also proportional-whole-tasks here. In general, however, we have found that using proportions nicely adapts to the underlying available resources, and leads to very few resource exhaustion failures while still using worker resources efficiently.\n\nThe current TaskVine implementation only accepts whole integers for its resources, which means that no worker can concurrently execute more tasks than its number of cores. (This will likely change in the future.)\n\nWhen you would like to run several tasks in a worker, but you are not sure about the resources each task needs, TaskVine can automatically find values of resources that maximize throughput, or minimize waste. This is discussed in the section below.\nWorker Resources\n\nBy default, a worker tries to use all the resources of the machine it is running. The resources detected are displayed when the worker starts up, for example:\n\nvine_worker: creating workspace /tmp/worker-102744-8066\nvine_worker: using 16 cores, 15843 MB memory, 61291 MB disk, 0 gpus\n\nYou can manually adjust the resources managed by a worker like this:\n\n$ vine_worker --cores 8  --memory 1000 --disk 8000 --gpus 1 ...other options...\n\nUnlike other resources, the default value for gpus is 0. You can use the command line option --gpus to declare how many gpus are available at a worker.\n\nWhen the lifetime of the worker is known, for example, the end of life of a lease, this information can be communicated to the worker as follows. For example, if the worker will be terminated in one hour:\n\n$ vine_worker --wall-time 3600 ...other options...\n\nIn combination with the worker option --wall-time, tasks can request a minimum time to execute with set_time_min, as explained (below)[#setting-task-resources].\n\nYou may also use the same --cores, --memory, --disk, and --gpus options when using batch submission script vine_submit_workers, and the script will correctly ask the right batch system for a node of the desired size.\n\nThe only caveat is when using vine_submit_workers -T uge, as there are many differences across systems that the script cannot manage. For vine_submit_workers -T uge you have to set both the resources used by the worker (i.e., with --cores, etc.) and the appropiate computing node with the -p option.\n\nFor example, say that your local UGE installation requires you to set the number of cores with the switch -pe smp , and you want workers with 4 cores:\n\n$ vine_submit_workers -T uge --cores 4 -p \"-pe smp 4\" MACHINENAME 9123\n\nIf you find that there are options that are needed everytime, you can compile CCTools using the --uge-parameter. For example, at Notre Dame we automatically set the number of cores as follows:\n\n$ ./configure  --uge-parameter '-pe smp $cores'\n\nSo that we can simply call:\n\n$ vine_submit_workers -T uge --cores 4 MACHINENAME 9123\n\nThe variables $cores, $memory, and $disk, have the values of the options passed to --cores, --memory, --disk.\nFactory Resources\n\nThe vine_factory accepts the arguments --cores, --memory, --disk, and --gpus to set the size of the desired workers. Resources may also be set in the configuration file as follows:\n\n{\n    \"manager-name\": \"myproject\",\n    \"max-workers\": 4,\n    \"min-workers\": 1,\n    \"cores\": 4,\n    \"memory\": 4096,\n    \"disk\": 4096,\n    \"gpus\": 1\n}\n\nGPU Types and Custom Features\n\nIt is sometimes necessary to match a task to a worker that has a specific capability. Perhaps your pool of workers has two different kinds of GPUs. The type of a GPU is automatically reported as a \"feature\" that tasks can select.\n\nTo describe a task that can only run on a specific GPU type, use add_feature:\nPython\n\nt.add_feature(\"NVIDIA RTX A2000\") # task requires worker with this feature\n\nC\n\n(Note that the GPU feature is automatically reported by the worker when it starts up.)\n\nvine_worker: using 4 cores, 15610 MB memory, 33859 MB disk, 1 gpus\nvine_worker: gpu is called feature \"NVIDIA RTX A2000\"\n\nYou may also add additional custom features to a worker at startup time using the --feature option:\n\nvine_worker ... --feature alpha --feature beta ...\n\nOr, use the factory to start a large number of workers with that feature:\n\nvine_factory ... --feature alpha --feature beta ...\n\nMonitoring and Enforcement\n\nSo far we have used resources values simply as hints to TaskVine to schedule concurrent tasks at workers. By default, TaskVine does not monitor or enforce these limits. You can enable monitoring and enforcement as follows:\nPython\n\n# Measure the resources used by tasks, and terminate tasks that go above their\n# resources:\nm.enable_monitoring()\n\n# Measure the resources used by tasks, but do not terminate tasks that go above\n# declared resources:\nm.enable_monitoring(watchdog=False)\n\n# Measure the resources used by tasks, but do not terminate tasks that go\n# above declared resources, and generate a time series per task. These time\n# series are written to the logs directory `vine-logs/time-series`.\n# Use with caution, as time series for long running tasks may be in the\n# order of gigabytes. \nm.enable_monitoring(m, watchdog=False, time_series=True)\n\nC\n\nWhen monitoring is enabled, you can explore the resources measured when a task returns:\nPython\n\nt = m.wait(5)\nif t:\n    print(\"Task used {} cores, {} MB memory, {} MB disk\",\n        t.resources_measured.cores,\n        t.resources_measured.memory,\n        t.resources_measured.disk)\n    print(\"Task was allocated {} cores, {} MB memory, {} MB disk\",\n        t.resources_requested.cores,\n        t.resources_requested.memory,\n        t.resources_requested.disk)\n    if t.limits_exceeded and t.limits_exceeded.cores > -1:\n        print(\"Task exceeded its cores allocation.\")\n\nC\n\nAlternatively, when you declare a task (i.e., before submitting it), you can declare a directory to which a report of the resources will be written. The report format is JSON, as its filename has the form vine-PID_OF_MANAGER-task-TASK_ID.summary.\nPython\n\nt = vine.Task(...)\nt.set_monitor_output(\"my-resources-output\")\n...\ntaskid = m.submit(t)\n\n# this can be set at declaration as well:\n t = vine.Task(\n    command = ...,\n    monitor_output = \"my-resources-output\"\n )\n\nC\n\nTaskVine also measures other resources, such as peak bandwidth, bytes_read, bytes_written, bytes_sent, bytes_received, total_files, cpu_time, and wall_time.\nGrouping Tasks with Similar Resource Needs\n\nSeveral tasks usually share the same resource description, and to this end, TaskVine allows you to tasks into groups called categories. You can attach resource descriptions to each category, and then label a task to set it as part of a category.\n\nWe can create some categories with their resource description as follows:\nPython\n\n# memory and disk values in MB.\nm.set_category_resources_max('my-category-a', {'cores': 2, 'memory': 1024, 'disk': 2048, 'gpus': 0})\nm.set_category_resources_max('my-category-b', {'cores': 1})\nm.set_category_resources_max('my-category-c', {})\n\nC\n\nIn the previous examples, we created three categories. Note that it is not necessary to set all the resources, as TaskVine can be directed to compute some efficient defaults. To assign a task to a category:\nPython\n\nt.set_category('my-category-a')\n\n# alternatively:\n t = vine.Task(\n    command = ...,\n    category = 'my-category-a'\n )\n\nC\n\nWhen a category leaves some resource unspecified, then TaskVine tries to find some reasonable defaults in the same way described before in the section (Specifying Task Resources)[#setting-task-resources].\n\nWarning\n\nWhen a task is declared as part of a category, and also has resources set directly with calls such as t.set_cores, the resources directly set take precedence over the category declaration for that task\n\nWhen the resources used by a task are unknown, TaskVine can measure and compute efficient resource values to maximize throughput or minimize waste, as we explain in the following sections.\nAutomatic Resource Management\n\nIf the resources a category uses are unknown, then TaskVine can be directed to find efficient resource values to maximize throughput or minimize resources wasted. In these modes, if a value for a resource is set with set_resources_max, then it is used as a theoretical maximum.\n\nWhen automatically computing resources, if any of cores, memory or disk are left unspecified in set_resources_max, then TaskVine will run some tasks using whole workers to collect some resource usage statistics. If all cores, memory, and disk are set, then TaskVine uses these maximum values instead of using whole workers. As before, unspecified gpus default to 0.\n\nOnce some statistics are available, further tasks may run with smaller allocations if such a change would increase throughput. Should a task exhaust its resources, it will be retried using the values of set_resources_max, or a whole worker, as explained before.\n\nAutomatic resource management is enabled per category as follows:\nPython\n\nm.enable_monitoring()\nm.set_category_resources_max('my-category-a', {})\nm.set_category_mode('my-category-a', \"max throughput\")\n\nm.set_category_resources_max('my-category-b', {'cores': 2})\nm.set_category_mode('my-category-b', \"max throughput\")\n\nC\n\nIn the previous examples, tasks in 'my-category-b' will never use more than two cores, while tasks in 'my-category-a' are free to use as many cores as the largest worker available if needed.\n\nYou can set a limit on the minimum resource value a category can use. The automatic resource computation will never go below the values set:\nPython\n\nm.set_category_resources_min('my-category-a', {'memory': 512})\n\nC\n\nYou can enquire about the resources computed per category with vine_status:\n\n$ vine_status -A  IP-OF-MACHINE-HOSTING-WQ PORT-OF-WQ\nCATEGORY        RUNNING    WAITING  FIT-WORKERS  MAX-CORES MAX-MEMORY   MAX-DISK\nanalysis            216        784           54          4      ~1011      ~3502\nmerge                20         92           30         ~1      ~4021      21318\ndefault               1         25           54         >1       ~503       >243\n\nIn the above, we have three categories, with RUNNING and WAITING tasks. The column FIT-WORKERS shows the count of workers that can fit at least one task in that category using the maximum resources either set or found. Values for max cores, memory and disk have modifiers ~ and > as follows:\n\n    No modifier: The maximum resource usage set with set_category_resources_max, or set for any task in the category via calls such as set_cores.\n    ~: The maximum resource usage so far seen when resource is left unspecified in set_category_resources_max. All tasks so far have run with no more than this resource value allocated.\n\n        : The maximum resource usage that has caused a resource exhaustion. If this value is larger than then one set with set_category_resources_max, then tasks that exhaust resources are not retried. Otherwise, if a maximum was not set, the tasks will be retried in larger workers as workers become available.\n\nWarning\n\nWhen resources are set directly to the task with calls such as t.set_cores, such resources are fixed for the task and are not modified when more efficient values are found.\n",
        "The simple API description of the ndcctools.taskvine library is below, including all classes, methods, and parameters:\nndcctools.taskvine.manager.Manager\n    __init__(self, port=9123, name=None, shutdown=False, run_info_path='vine-run-info', staging_path=None, ssl=None, init_fn=None, status_display_interval=None)\n    application_info(self)\n    blacklist(self, host)\n    blacklist_clear(self, host=None)\n    blacklist_with_timeout(self, host, timeout)\n    block_host(self, host)\n    block_host_with_timeout(self, host, timeout)\n    cancel_all(self)\n    cancel_by_category(self, category)\n    cancel_by_task_id(self, id)\n    cancel_by_task_tag(self, tag)\n    check_library_exists(self, library_name)\n    create_library_from_command(self, executable_path, name, env=None)\n    create_library_from_functions(self, library_name, *function_list, poncho_env=None, init_command=None, add_env=True, hoisting_modules=None)\n    create_library_from_serverized_files(self, library_name, library_path, env=None)\n    declare_buffer(self, buffer=None, cache=False, peer_transfer=True)\n    declare_chirp(self, server, source, ticket=None, env=None, cache=False, peer_transfer=True)\n    declare_file(self, path, cache=False, peer_transfer=True, unlink_when_done=False)\n    declare_minitask(self, minitask, source, cache=False, peer_transfer=True)\n    declare_poncho(self, package, cache=False, peer_transfer=True)\n    declare_starch(self, starch, cache=False, peer_transfer=True)\n    declare_temp(self)\n    declare_untar(self, tarball, cache=False, peer_transfer=True)\n    declare_url(self, url, cache=False, peer_transfer=True)\n    declare_xrootd(self, source, proxy=None, env=None, cache=False, peer_transfer=True)\n    disable_peer_transfers(self)\n    empty(self)\n    enable_disconnect_slow_workers(self, multiplier)\n    enable_disconnect_slow_workers_category(self, name, multiplier)\n    enable_monitoring(self, watchdog=True, time_series=False)\n    enable_peer_transfers(self)\n    fetch_file(self, file)\n    hungry(self)\n    initialize_categories(self, filename, rm)\n    install_library(self, task)\n    log_debug_app(self, entry)\n    log_txn_app(self, entry)\n    map(self, fn, seq, chunksize=1)\n    pair(self, fn, seq1, seq2, chunksize=1, env=None)\n    prune_file(self, file)\n    remote_map(self, fn, seq, library, name, chunksize=1)\n    remote_pair(self, fn, seq1, seq2, library, name, chunksize=1)\n    remote_tree_reduce(self, fn, seq, library, name, chunksize=2)\n    remove_file(self, file)\n    remove_library(self, name)\n    set_catalog_servers(self, catalogs)\n    set_category_autolabel_resource(self, category, resource, autolabel)\n    set_category_first_allocation_guess(self, category, rmd)\n    set_category_max_concurrent(self, category, max_concurrent)\n    set_category_mode(self, category, mode)\n    set_category_resources_max(self, category, rmd)\n    set_category_resources_min(self, category, rmd)\n    set_draining_by_hostname(self, hostname, drain_mode=True)\n    set_keepalive_interval(self, interval)\n    set_keepalive_timeout(self, timeout)\n    set_manager_preferred_connection(self, mode)\n    set_min_task_id(self, minid)\n    set_name(self, name)\n    set_password(self, password)\n    set_password_file(self, file)\n    set_priority(self, priority)\n    set_property(self, name, value)\n    set_resources_max(self, rmd)\n    set_resources_min(self, rmd)\n    set_runtime_info_path(self, dirname)\n    set_scheduler(self, scheduler)\n    stats_category(self, category)\n    status(self, request)\n    submit(self, task)\n    summarize_workers(self)\n    task_state(self, task_id)\n    tasks_left_count(self, ntasks)\n    tree_reduce(self, fn, seq, chunksize=2)\n    tune(self, name, value)\n    unblock_host(self, host=None)\n    undeclare_file(self, file)\n    undeclare_function(self, fn)\n    update_catalog(self)\n    wait(self, timeout='wait_forever')\n    wait_for_tag(self, tag, timeout='wait_forever')\n    wait_for_task_id(self, task_id, timeout='wait_forever')\n    workers_shutdown(self, n=0)\nndcctools.taskvine.task.Task\n    __init__(self, command, **task_info)\n    add_environment(self, f)\n    add_execution_context(self, f)\n    add_feature(self, name)\n    add_input(self, file, remote_name, strict_input=False, mount_symlink=False)\n    add_nopen(self, manager)\n    add_output(self, file, remote_name, watch=False, failure_only=None, success_only=None)\n    add_poncho_package(self, file)\n    add_starch_package(self, file)\n    clone(self)\n    completed(self)\n    get_library_required(self)\n    get_libray_provided(self)\n    get_metric(self, name)\n    needs_library(self, library)\n    provides_library(self, library)\n    set_category(self, name)\n    set_command(self, command)\n    set_cores(self, cores)\n    set_disk(self, disk)\n    set_env_var(self, name, value=None)\n    set_function_slots(self, nslots)\n    set_gpus(self, gpus)\n    set_library_provided(self, library_name)\n    set_library_required(self, library)\n    set_max_forsaken(self, max_forsaken)\n    set_memory(self, memory)\n    set_monitor_output(self, directory)\n    set_priority(self, priority)\n    set_retries(self, max_retries)\n    set_scheduler(self, scheduler)\n    set_snapshot_file(self, filename)\n    set_tag(self, tag)\n    set_time_end(self, useconds)\n    set_time_max(self, useconds)\n    set_time_min(self, seconds)\n    set_time_start(self, useconds)\n    submit_finalize(self)\n    successful(self)\nndcctools.taskvine.task.LibraryTask\n    __init__(self, fn, library_name)\n    add_environment(self, f)\n    add_execution_context(self, f)\n    add_feature(self, name)\n    add_input(self, file, remote_name, strict_input=False, mount_symlink=False)\n    add_nopen(self, manager)\n    add_output(self, file, remote_name, watch=False, failure_only=None, success_only=None)\n    add_poncho_package(self, file)\n    add_starch_package(self, file)\n    clone(self)\n    completed(self)\n    get_library_required(self)\n    get_libray_provided(self)\n    get_metric(self, name)\n    needs_library(self, library)\n    provides_library(self, library)\n    set_category(self, name)\n    set_command(self, command)\n    set_cores(self, cores)\n    set_disk(self, disk)\n    set_env_var(self, name, value=None)\n    set_function_slots(self, nslots)\n    set_gpus(self, gpus)\n    set_library_provided(self, library_name)\n    set_library_required(self, library)\n    set_max_forsaken(self, max_forsaken)\n    set_memory(self, memory)\n    set_monitor_output(self, directory)\n    set_priority(self, priority)\n    set_retries(self, max_retries)\n    set_scheduler(self, scheduler)\n    set_snapshot_file(self, filename)\n    set_tag(self, tag)\n    set_time_end(self, useconds)\n    set_time_max(self, useconds)\n    set_time_min(self, seconds)\n    set_time_start(self, useconds)\n    submit_finalize(self)\n    successful(self)\nndcctools.taskvine.task.PythonTask\n    __init__(self, func, *args, **kwargs)\n    add_environment(self, f)\n    add_execution_context(self, f)\n    add_feature(self, name)\n    add_input(self, file, remote_name, strict_input=False, mount_symlink=False)\n    add_nopen(self, manager)\n    add_output(self, file, remote_name, watch=False, failure_only=None, success_only=None)\n    add_poncho_package(self, file)\n    add_starch_package(self, file)\n    clone(self)\n    completed(self)\n    disable_output_serialization(self)\n    disable_temp_output(self)\n    enable_temp_output(self)\n    get_library_required(self)\n    get_libray_provided(self)\n    get_metric(self, name)\n    needs_library(self, library)\n    provides_library(self, library)\n    set_category(self, name)\n    set_command(self, command)\n    set_cores(self, cores)\n    set_disk(self, disk)\n    set_env_var(self, name, value=None)\n    set_function_slots(self, nslots)\n    set_gpus(self, gpus)\n    set_library_provided(self, library_name)\n    set_library_required(self, library)\n    set_max_forsaken(self, max_forsaken)\n    set_memory(self, memory)\n    set_monitor_output(self, directory)\n    set_output_cache(self, cache=False)\n    set_priority(self, priority)\n    set_retries(self, max_retries)\n    set_scheduler(self, scheduler)\n    set_snapshot_file(self, filename)\n    set_tag(self, tag)\n    set_time_end(self, useconds)\n    set_time_max(self, useconds)\n    set_time_min(self, seconds)\n    set_time_start(self, useconds)\n    submit_finalize(self)\n    successful(self)\nndcctools.taskvine.task.FunctionCall\n    __init__(self, library, fn, *args, **kwargs)\n    add_environment(self, f)\n    add_execution_context(self, f)\n    add_feature(self, name)\n    add_input(self, file, remote_name, strict_input=False, mount_symlink=False)\n    add_nopen(self, manager)\n    add_output(self, file, remote_name, watch=False, failure_only=None, success_only=None)\n    add_poncho_package(self, file)\n    add_starch_package(self, file)\n    clone(self)\n    completed(self)\n    disable_output_serialization(self)\n    disable_temp_output(self)\n    enable_temp_output(self)\n    get_library_required(self)\n    get_libray_provided(self)\n    get_metric(self, name)\n    needs_library(self, library)\n    provides_library(self, library)\n    set_category(self, name)\n    set_command(self, command)\n    set_cores(self, cores)\n    set_disk(self, disk)\n    set_env_var(self, name, value=None)\n    set_exec_method(self, remote_task_exec_method)\n    set_fn_args(self, args=[], kwargs={})\n    set_function_slots(self, nslots)\n    set_gpus(self, gpus)\n    set_library_provided(self, library_name)\n    set_library_required(self, library)\n    set_max_forsaken(self, max_forsaken)\n    set_memory(self, memory)\n    set_monitor_output(self, directory)\n    set_output_cache(self, cache=False)\n    set_priority(self, priority)\n    set_retries(self, max_retries)\n    set_scheduler(self, scheduler)\n    set_snapshot_file(self, filename)\n    set_tag(self, tag)\n    set_time_end(self, useconds)\n    set_time_max(self, useconds)\n    set_time_min(self, seconds)\n    set_time_start(self, useconds)\n    submit_finalize(self)\n    successful(self)\nndcctools.taskvine.futures.FuturesExecutor\n    __init__(self, port=9123, batch_type='local', manager=None, manager_host_port=None, manager_name=None, factory_binary=None, worker_binary=None, log_file='/dev/null', factory=True, opts={})\n    create_library_from_functions(self, name, *function_list, poncho_env=None, init_command=None, add_env=True, hoisting_modules=None)\n    future_funcall(self, library_name, fn, *args, **kwargs)\n    future_task(self, fn, *args, **kwargs)\n    get(self, name)\n    install_library(self, libtask)\n    map(self, fn, *iterables, timeout=None, chunksize=1)\n    set(self, name, value)\n    shutdown(self, wait=True, *, cancel_futures=False)\n    submit(self, fn, *args, **kwargs)\nndcctools.taskvine.futures.VineFuture\n    __init__(self, task)\n    add_done_callback(self, fn)\n    cancel(self)\n    cancelled(self)\n    done(self)\n    exception(self, timeout=None)\n    result(self, timeout='wait_forever')\n    running(self)\n    set_exception(self, exception)\n    set_result(self, result)\n    set_running_or_notify_cancel(self)\nndcctools.taskvine.futures.FuturePythonTask\n    __init__(self, manager, func, *args, **kwargs)\n    add_environment(self, f)\n    add_execution_context(self, f)\n    add_feature(self, name)\n    add_input(self, file, remote_name, strict_input=False, mount_symlink=False)\n    add_nopen(self, manager)\n    add_output(self, file, remote_name, watch=False, failure_only=None, success_only=None)\n    add_poncho_package(self, file)\n    add_starch_package(self, file)\n    clone(self)\n    completed(self)\n    disable_output_serialization(self)\n    disable_temp_output(self)\n    enable_temp_output(self)\n    get_library_required(self)\n    get_libray_provided(self)\n    get_metric(self, name)\n    needs_library(self, library)\n    output(self, timeout='wait_forever')\n    provides_library(self, library)\n    set_category(self, name)\n    set_command(self, command)\n    set_cores(self, cores)\n    set_disk(self, disk)\n    set_env_var(self, name, value=None)\n    set_function_slots(self, nslots)\n    set_gpus(self, gpus)\n    set_library_provided(self, library_name)\n    set_library_required(self, library)\n    set_max_forsaken(self, max_forsaken)\n    set_memory(self, memory)\n    set_monitor_output(self, directory)\n    set_output_cache(self, cache=False)\n    set_priority(self, priority)\n    set_retries(self, max_retries)\n    set_scheduler(self, scheduler)\n    set_snapshot_file(self, filename)\n    set_tag(self, tag)\n    set_time_end(self, useconds)\n    set_time_max(self, useconds)\n    set_time_min(self, seconds)\n    set_time_start(self, useconds)\n    submit_finalize(self)\n    successful(self)\nndcctools.taskvine.futures.FutureFunctionCall\n    __init__(self, manager, library_name, fn, *args, **kwargs)\n    add_environment(self, f)\n    add_execution_context(self, f)\n    add_feature(self, name)\n    add_input(self, file, remote_name, strict_input=False, mount_symlink=False)\n    add_nopen(self, manager)\n    add_output(self, file, remote_name, watch=False, failure_only=None, success_only=None)\n    add_poncho_package(self, file)\n    add_starch_package(self, file)\n    clone(self)\n    completed(self)\n    disable_output_serialization(self)\n    disable_temp_output(self)\n    enable_temp_output(self)\n    get_library_required(self)\n    get_libray_provided(self)\n    get_metric(self, name)\n    needs_library(self, library)\n    output(self, timeout='wait_forever')\n    provides_library(self, library)\n    set_category(self, name)\n    set_command(self, command)\n    set_cores(self, cores)\n    set_disk(self, disk)\n    set_env_var(self, name, value=None)\n    set_exec_method(self, remote_task_exec_method)\n    set_fn_args(self, args=[], kwargs={})\n    set_function_slots(self, nslots)\n    set_gpus(self, gpus)\n    set_library_provided(self, library_name)\n    set_library_required(self, library)\n    set_max_forsaken(self, max_forsaken)\n    set_memory(self, memory)\n    set_monitor_output(self, directory)\n    set_output_cache(self, cache=False)\n    set_priority(self, priority)\n    set_retries(self, max_retries)\n    set_scheduler(self, scheduler)\n    set_snapshot_file(self, filename)\n    set_tag(self, tag)\n    set_time_end(self, useconds)\n    set_time_max(self, useconds)\n    set_time_min(self, seconds)\n    set_time_start(self, useconds)\n    submit_finalize(self)\n    successful(self)\n"
    ],
    "prompts": [
        {
            "id": "taskvine0",
            "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\".",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager(port=9123)\nprint(f\"Listening on port {m.port}\")\n\n# Declare the output file\noutput_file = m.declare_file(\"current_date\")\n\n# Create a task to get the current date\ntask = vine.Task(\"date > current_date\")\ntask.add_output(output_file, \"current_date\")\n\n# Submit the task\nm.submit(task)\n\n# Wait for the task to complete and print the result\nprint(\"Waiting for the task to complete...\")\nwhile not m.empty():\n    t = m.wait(5)\n    if t:\n        print(f\"Task {t.id} completed successfully.\")\n\nprint(\"All tasks done.\")\n```\n"
        },
        {
            "id": "taskvine1",
            "content": "Write a Python TaskVine application to count the number of times the keywords \"wealth\", \"nation\", \"labour\", \"price\", \"nature\", and \"commodity\" appear in Adam Smith's Wealth of Nations. The text is available at \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\".",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager(0)\nprint(f\"Listening on port {m.port}\")\n\n# Declare the input file from the URL\nf = m.declare_url(\"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\", cache=\"workflow\")\n\n# List of keywords to search for\nkeywords = [\"wealth\", \"nation\", \"labour\", \"price\", \"nature\", \"commodity\"]\n\n# Submit tasks for each keyword\nprint(\"Submitting tasks...\")\nfor keyword in keywords:\n    task = vine.Task(f\"grep -o -i {keyword} wealth_of_nations.txt | wc -l\")\n    task.add_input(f, \"wealth_of_nations.txt\")\n    task.set_cores(1)\n    m.submit(task)\n\n# Wait for tasks to complete and display results\nprint(\"Waiting for tasks to complete...\")\nwhile not m.empty():\n    task = m.wait(5)\n    if task:\n        print(f\"Keyword '{keywords[task.id - 1]}' appears {task.output.strip()} times.\")\n\nprint(\"All tasks done.\")\n```\n\nTo run this application, save the code to a file, for example `count_keywords.py`, and execute it using Python. Make sure to start a TaskVine worker to process the tasks."
        },
        {
            "id": "taskvine2",
            "content": "Write a Python TaskVine application to run my program \"script.sh\" with various input arguments and organizes all output data. \"script.sh\" takes, as input, an integer and two files. \"script.sh\" outputs a file named \"output{i}.txt\" where \"{i}\" is the input integer. The application must run \"script.sh\" with input integers 1-1000 and input files \"file1.input\" and \"file2.input\" which are stored in the directory \"script_inputs\". The application must store all output files in a directory named \"script_outputs\".",
            "response": "```python\nimport os\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager(port=9123)\nprint(f\"Listening on port {m.port}\")\n\n# Declare the input files\ninput_file1 = m.declare_file(\"script_inputs/file1.input\")\ninput_file2 = m.declare_file(\"script_inputs/file2.input\")\n\n# Ensure the output directory exists\nos.makedirs(\"script_outputs\", exist_ok=True)\n\n# Submit tasks for each integer from 1 to 1000\nfor i in range(1, 1001):\n    output_file = m.declare_file(f\"script_outputs/output{i}.txt\")\n    \n    # Create a task for each integer\n    task = vine.Task(f\"./script.sh {i} file1.input file2.input > output{i}.txt\")\n    task.add_input(input_file1, \"file1.input\")\n    task.add_input(input_file2, \"file2.input\")\n    task.add_output(output_file, f\"output{i}.txt\")\n    \n    # Submit the task\n    m.submit(task)\n\n# Wait for all tasks to complete\nprint(\"Waiting for tasks to complete...\")\nwhile not m.empty():\n    task = m.wait(5)\n    if task:\n        if task.successful():\n            print(f\"Task {task.id} completed successfully.\")\n        else:\n            print(f\"Task {task.id} failed with exit code {task.exit_code}.\")\n\nprint(\"All tasks done.\")\n```\n\nThis script sets up a TaskVine manager, declares the necessary input files, and submits tasks to run `script.sh` with integers from 1 to 1000. It waits for all tasks to complete and stores the output files in the `script_outputs` directory."
        },
        {
            "id": "taskvine3",
            "content": "Write a Python TaskVine application to execute a pipeline of shell scripts. I have the script \"script1.sh\" which outputs a file named \"intermediary.out\" upon completion. I also have the scripts \"script2.sh\" and \"script3.sh\"  which both accept an input file as a command line argument. \"script2.sh\" and \"script3.sh\" must both receive \"intermediary.out\" as the input. Finally, \"script2.sh\" and \"script3.sh\" output files named \"script2.out\" and \"script3.out\", respectively. Save these outputs files on the host machine. \"intermediary.out\" need not be saved to the host machine.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager(port=9123)\nprint(f\"Listening on port {m.port}\")\n\n# Declare the shell scripts as input files\nscript1 = m.declare_file(\"script1.sh\")\nscript2 = m.declare_file(\"script2.sh\")\nscript3 = m.declare_file(\"script3.sh\")\n\n# Declare the intermediary output as a temporary file\nintermediary_out = m.declare_temp()\n\n# Declare the final output files\nscript2_out = m.declare_file(\"script2.out\")\nscript3_out = m.declare_file(\"script3.out\")\n\n# Task for script1.sh\ntask1 = vine.Task(\"bash script1.sh > intermediary.out\")\ntask1.add_input(script1, \"script1.sh\")\ntask1.add_output(intermediary_out, \"intermediary.out\")\nm.submit(task1)\n\n# Task for script2.sh\ntask2 = vine.Task(\"bash script2.sh intermediary.out > script2.out\")\ntask2.add_input(script2, \"script2.sh\")\ntask2.add_input(intermediary_out, \"intermediary.out\")\ntask2.add_output(script2_out, \"script2.out\")\nm.submit(task2)\n\n# Task for script3.sh\ntask3 = vine.Task(\"bash script3.sh intermediary.out > script3.out\")\ntask3.add_input(script3, \"script3.sh\")\ntask3.add_input(intermediary_out, \"intermediary.out\")\ntask3.add_output(script3_out, \"script3.out\")\nm.submit(task3)\n\n# Wait for tasks to complete\nprint(\"Waiting for tasks to complete...\")\nwhile not m.empty():\n    task = m.wait(5)\n    if task:\n        if task.successful():\n            print(f\"Task {task.id} completed successfully.\")\n        else:\n            print(f\"Task {task.id} failed with exit code {task.exit_code}.\")\n\nprint(\"All tasks done.\")\n```\n\nThis script sets up a TaskVine manager and submits three tasks corresponding to the three shell scripts. The intermediary output is declared as a temporary file, which means it will not be saved to the host machine. The final outputs from `script2.sh` and `script3.sh` are declared as files to be saved on the host machine."
        },
        {
            "id": "taskvine4",
            "content": "Write a Python TaskVine application to run my GPU-accelerated program. The program binary is stored at \"./train_demo\". The program requires that the worker machine has the feature \"NVIDIA RTX 4090\". Upon completion, the program outputs \"model.tar.gz\". The output file must be saved to the host machine.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager(port=9123)\nprint(f\"Listening on port {m.port}\")\n\n# Declare the output file\noutput_file = m.declare_file(\"model.tar.gz\")\n\n# Create a task to run the GPU-accelerated program\ntask = vine.Task(\"./train_demo\")\ntask.add_output(output_file, \"model.tar.gz\")\ntask.add_feature(\"NVIDIA RTX 4090\")\n\n# Submit the task\nm.submit(task)\n\n# Wait for the task to complete\nprint(\"Waiting for the task to complete...\")\nwhile not m.empty():\n    t = m.wait(5)\n    if t:\n        if t.successful():\n            print(\"Task completed successfully.\")\n        else:\n            print(f\"Task failed with exit code {t.exit_code}\")\n\nprint(\"All tasks done.\")\n```\n\nTo run this application, execute the script and ensure that a TaskVine worker with the \"NVIDIA RTX 4090\" feature is available to process the task."
        },
        {
            "id": "taskvine5",
            "content": "Write a Python TaskVine application to compile and test my project stored at \"complex_project/\". To compile the project, run the \"make all\" command in the project's root directory. Then, to test the project, run \"make test\". The compilation and test must use at most 4 cores, 1024 MB of memory, and 2048 MB of disk. Enable resource monitoring to track resource usage, but do not terminate the task if it overuses resources. When the task completes, print the task's exit code and standard output. For each resource that the task overused, print the resource and by how much it overused.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager(port=9123)\nm.enable_monitoring(watchdog=False)\n\n# Declare the project directory\nproject_dir = m.declare_file(\"complex_project/\", cache=\"workflow\")\n\n# Create a task to compile and test the project\ntask = vine.Task(\"make all && make test\")\ntask.add_input(project_dir, \"complex_project\")\ntask.set_cores(4)\ntask.set_memory(1024)\ntask.set_disk(2048)\n\n# Submit the task\nm.submit(task)\n\n# Wait for the task to complete\nwhile not m.empty():\n    t = m.wait(5)\n    if t:\n        print(f\"Task {t.id} completed with exit code {t.exit_code}\")\n        print(f\"Standard output:\\n{t.std_output}\")\n\n        # Check for resource overuse\n        resources_measured = t.resources_measured\n        resources_requested = t.resources_requested\n\n        if resources_measured.cores > resources_requested.cores:\n            print(f\"Overused cores by {resources_measured.cores - resources_requested.cores}\")\n\n        if resources_measured.memory > resources_requested.memory:\n            print(f\"Overused memory by {resources_measured.memory - resources_requested.memory} MB\")\n\n        if resources_measured.disk > resources_requested.disk:\n            print(f\"Overused disk by {resources_measured.disk - resources_requested.disk} MB\")\n```\n\nMake sure to have the `complex_project/` directory available in the same location where you run this script. Also, ensure that the `make` command is properly set up to compile and test your project."
        },
        {
            "id": "taskvine6",
            "content": "Write a Python TaskVine application that executes multiple programs with different levels of resource requirements. The two task categories must be named \"intensive\" and \"light\". The \"intensive\" tasks require 8 cores and 16 GB of memory. The \"light\" tasks require 1 core and 2 GB of memory. In the intensive category, submit 10 tasks to execute the shell script \"intensive.sh\". In the light category, submit 100 tasks to execute the shell script \"light.sh\" Print the standard output of each task upon completion.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a new manager\nm = vine.Manager(port=9123)\nprint(f\"Listening on port {m.port}\")\n\n# Set resource requirements for the \"intensive\" category\nm.set_category_resources_max('intensive', {'cores': 8, 'memory': 16384})\n\n# Set resource requirements for the \"light\" category\nm.set_category_resources_max('light', {'cores': 1, 'memory': 2048})\n\n# Submit 10 \"intensive\" tasks\nfor i in range(10):\n    task = vine.Task(\"bash intensive.sh\")\n    task.set_category('intensive')\n    m.submit(task)\n\n# Submit 100 \"light\" tasks\nfor i in range(100):\n    task = vine.Task(\"bash light.sh\")\n    task.set_category('light')\n    m.submit(task)\n\n# Wait for tasks to complete and print their output\nprint(\"Waiting for tasks to complete...\")\nwhile not m.empty():\n    task = m.wait(5)\n    if task:\n        print(f\"Task {task.id} completed with output:\\n{task.output}\")\n\nprint(\"All tasks done.\")\n```\n\nThis script sets up a TaskVine manager, defines two task categories with different resource requirements, submits tasks to each category, and prints the output of each task upon completion."
        },
        {
            "id": "taskvine7",
            "content": "Write a Python TaskVine application to perform matrix inversion and transposition. The matrix computations must be defined in Python functions and added to a TaskVine library called \"matrix_library\". The user must specify the size, m x n,  of the matrix and the number of matrices, i, on which to perform computation. The application must randomly generate i matrices and for each matrix, print the matrix, print the inverse matrix, and print the transposed matrix.",
            "response": "```python\nimport numpy as np\nimport ndcctools.taskvine as vine\n\n# Define the matrix inversion function\ndef invert_matrix(matrix):\n    return np.linalg.inv(matrix)\n\n# Define the matrix transposition function\ndef transpose_matrix(matrix):\n    return np.transpose(matrix)\n\ndef main():\n    # User input for matrix size and number of matrices\n    m = int(input(\"Enter the number of rows (m): \"))\n    n = int(input(\"Enter the number of columns (n): \"))\n    i = int(input(\"Enter the number of matrices (i): \"))\n\n    # Create a TaskVine manager\n    manager = vine.Manager()\n\n    # Create a library from the matrix functions\n    libtask = manager.create_library_from_functions(\n        \"matrix_library\", invert_matrix, transpose_matrix\n    )\n    manager.install_library(libtask)\n\n    # Generate and process matrices\n    for _ in range(i):\n        # Randomly generate a matrix\n        matrix = np.random.rand(m, n)\n        print(\"Original Matrix:\")\n        print(matrix)\n\n        # Submit inversion task\n        invert_task = vine.FunctionCall(\"matrix_library\", \"invert_matrix\", matrix)\n        manager.submit(invert_task)\n\n        # Submit transposition task\n        transpose_task = vine.FunctionCall(\"matrix_library\", \"transpose_matrix\", matrix)\n        manager.submit(transpose_task)\n\n        # Wait for tasks to complete and print results\n        while not manager.empty():\n            task = manager.wait(5)\n            if task:\n                if task.successful():\n                    if task.fn == \"invert_matrix\":\n                        print(\"Inverse Matrix:\")\n                        print(task.output)\n                    elif task.fn == \"transpose_matrix\":\n                        print(\"Transposed Matrix:\")\n                        print(task.output)\n                else:\n                    print(f\"Task {task.id} failed.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script defines two functions for matrix inversion and transposition, creates a TaskVine library with these functions, and processes a user-specified number of randomly generated matrices. Each matrix is inverted and transposed, and the results are printed."
        },
        {
            "id": "taskvine8",
            "content": "Write a Python Taskvine application to fetch the titles of multiple news webpages. The webpage contents must be downloaded asynchronously using the TaskVine futures executor. Print the URL and title of each webpage in order of the completion of each task. The webpages I am interested in are \"https://abcnews.com\", \"https://apnews.com\", \"https://axios.com\", \"https://cnn.com\", \"https://nbcnews.com\", \"https://nytimes.com\", \"https://reuters.com\", \"https://washingtonpost.com\", \"https://wsj.com\".",
            "response": "```python\nimport ndcctools.taskvine as vine\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_title(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.content, 'html.parser')\n        title = soup.title.string if soup.title else 'No title found'\n        return url, title\n    except Exception as e:\n        return url, f\"Error: {e}\"\n\ndef main():\n    urls = [\n        \"https://abcnews.com\",\n        \"https://apnews.com\",\n        \"https://axios.com\",\n        \"https://cnn.com\",\n        \"https://nbcnews.com\",\n        \"https://nytimes.com\",\n        \"https://reuters.com\",\n        \"https://washingtonpost.com\",\n        \"https://wsj.com\"\n    ]\n\n    # Create a FuturesExecutor\n    executor = vine.FuturesExecutor(manager_name='news_fetcher')\n\n    # Submit tasks to fetch titles\n    futures = [executor.submit(fetch_title, url) for url in urls]\n\n    # Wait for tasks to complete and print results\n    for future in futures:\n        url, title = future.result()\n        print(f\"URL: {url}, Title: {title}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis code uses the TaskVine futures executor to asynchronously fetch the titles of the specified news webpages. It prints the URL and title of each webpage as each task completes."
        },
        {
            "id": "taskvine9",
            "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\". To prevent an unwanted worker from connecting to the manager, use the password stored in the file \"taskvine.password\". Further, encrypt communication between the manager and worker with SSL using the \"key.pem\" and \"certificate.pem\" files.",
            "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a new manager with SSL and password authentication\nm = vine.Manager(port=9123, ssl=('key.pem', 'certificate.pem'))\nm.set_password_file(\"taskvine.password\")\n\n# Declare the output file\noutput_file = m.declare_file(\"current_date\", cache=\"workflow\")\n\n# Create a task to get the current date\ntask = vine.Task(\"date > current_date\")\ntask.add_output(output_file, \"current_date\")\n\n# Submit the task\nm.submit(task)\n\n# Wait for the task to complete and print the result\nwhile not m.empty():\n    t = m.wait(5)\n    if t:\n        if t.successful():\n            print(\"Task completed successfully.\")\n        else:\n            print(\"Task failed.\")\n\nprint(\"All tasks done.\")\n```\n\nTo run this application, execute the script and start a worker with the following command:\n\n```bash\nvine_worker --password taskvine.password --ssl localhost 9123\n```\n\nMake sure the `key.pem`, `certificate.pem`, and `taskvine.password` files are in the same directory as the script."
        }
    ]
}
