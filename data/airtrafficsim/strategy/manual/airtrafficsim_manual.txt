#####
Creating a simulation environment
The simulation environment files, located at airtrafficsim_data/environment/, inform AirTrafficSim how to initialise the environment and how to control the traffic during simulation. Four sample tutorial environments DemoEnv, FullFlightDemo, WeatherDemo, and ConvertHistoricDemo are included in airtrafficsim_data/environment/.

Creating the file
Tip

It may be easier to copy one of the sample environments when creating a new one.
To create a simulation environment, create a new Python file under airtrafficsim_data/environment/ with the name you want. Then, create a new Python class in the file with the same name. Note that this new class is actually a subclass of airtrafficsim.core.environment.

Important

Please note that the file name should be exactly equal to the class name including the capitals as it is dynamically imported at runtime by Python when a user selects the environment in the UI.
Creating the class content
We will discuss the setup of an environment file referencing DemoEnv.py. Notice that class DemoEnv(Environment): is a subclass of Environment at airtrafficsim.core.environment.

airtrafficsim_data/environment/DemoEnv.py
```
from datetime import datetime
from pathlib import Path

from airtrafficsim.core.environment import Environment
from airtrafficsim.core.aircraft import Aircraft
from airtrafficsim.utils.enums import Config, FlightPhase

class DemoEnv(Environment):

    def __init__(self):
        # Section 1
        # Initialize environment base class
        super().__init__(file_name = Path(__file__).name.removesuffix('.py'), #File name (do not change)
                        start_time = datetime.fromisoformat('2022-03-22T00:00:00+00:00'),
                        end_time = 1000,
                        weather_mode = "",
                        performance_mode = "BADA" 
                        )

        # Section 2
        # Add aircraft
        self.aircraft_head = Aircraft(self.traffic, call_sign="HEAD", aircraft_type="A20N", flight_phase=FlightPhase.CRUISE, configuration=Config.CLEAN,
                                      lat=22.019213, long=113.539164, alt=20000.0, heading=175.0, cas=250.0, fuel_weight=10000.0, payload_weight=12000.0,
                                      arrival_airport="VHHH", arrival_runway="07R", star = "SIER7A", approach = "I07R", cruise_alt=37000)
        # self.aircraft_head.set_speed(250.0) # To set the aircraft to follow given speed command instead of auto procedural
        self.aircraft_fol = Aircraft(self.traffic, call_sign="FOLLOW", aircraft_type="A20N", flight_phase=FlightPhase.CRUISE, configuration=Config.CLEAN,
                                     lat=21.9, long=113.5, alt=20000.0, heading=175.0, cas=310.0, fuel_weight=10000.0, payload_weight=12000.0, cruise_alt=37000)


    # Section 3
    def should_end(self):
        return False

    # Section 4
    def atc_command(self):
        # User algorithm
        if self.global_time == 10:  
            # Right
            self.aircraft_fol.set_heading(220)
            # Left
            # self.aircraft_head.set_heading(150)

        if self.global_time == 300:
            # Climb
            self.aircraft_fol.set_alt(30000)
            # Descend
            # self.aircraft_head.set_alt(11000)

        if self.global_time == 900:
            self.traffic.del_aircraft(self.aircraft_head.index)
```

1. Initialize environment base class
There are five parameters needed to initialize the basic information of this simulation, which will be explained below.

file_name is used to name the solution files. It has been set by default. Please do not change.
start_time is a Python datetime object representing the simulation UTC start time that you want to study. It will be used to search for historical weather data.
end_time is an integer value representing how many seconds you want the simulation to continue.
weather_mode is a string to select what weather database to be used. (“”: ISA, “ERA5”: ECMWF ERA5)
performance_mode is a string to select which performance model is used. (“BADA”: BADA)
Note

We are working toward including OpenAP performance data. Right now, only the BADA performance model can be used.

2. Add aircraft
Air traffic is stored in arrays at Traffic class in airtrafficsim/core/traffic.py. Each Aircraft in airtrafficsim/core/aircraft.py represents an individual aircraft in the traffic array and provides an interface to command the aircraft movement. The parameters to initialize an aircraft are explained below.

Parameters
Meanings
traffic This points to the traffic array class. (The value must be self.traffic)
General:
call_sign Call sign of the aircraft (string)
aircraft_type ICAO aircraft type (string)
flight_phase Current flight phase (FlightPhase enums)
configuration Current configuration (Configuration enums)
Position:
lat Current latitude (degree)
long Current longitude (degree)
alt Current altitude (feet)
cas Current calibrated airspeed (knots)
Weight:
fuel_weight Current fuel weight (kg) payload_weight
Current payload weight (kg)
Flight plan:
departure_airport OPTIONAL: Departure airport (string)
departure_runway OPTIONAL: Departure runway (string)
sid OPTIONAL: Standard Instrument Departure Procedure (string)
arrival_airport OPTIONAL: Arrival airport (string)
arrival_runway OPTIONAL: Arrival airport (string)
star OPTIONAL: Standard Terminal Arrival Procedure (string)
approach OPTIONAL: ILS approach procedure (string)
flight_plan OPTIONAL: Array of waypoints that the aircraft will fly ([string])
cruise_alt OPTIONAL: Cruise altitude (feet)

3. Should end
This is an override function for the Environment base class to allow you to control whether the simulation should end earlier than indicated by end_time. For each timestep, AirTrafficSim will check the condition that the function returns. If it returns True, the simulation will end.

4. ATC command
This is an override function for the Environment base class to allow you to command how traffic moves in this timestep. It can be a simple time-based condition in this sample or it can be a more complicated algorithm developed by you.
#####
Adding flight plan

AirTrafficSim can simulate flights following a user-defined flight plan. The FullFlightDemo class in airtrafficsim_data/environment/FullFlightDemo.py demonstrates how to set up a flight plan in AirTrafficSim. This tutorial simulates setting up a flight departing from the Hong Kong International Airport (VHHH) to the Taoyuan International Airport (RCTP) with SID and STAR.

Parameters
In the add aircraft section of the init function of the FullFlightDemo class, the aircraft with callsign (FULL) is created. For the details of each parameter, you may reference this section.

Tip
You can get the runway coordinate through the function Nav.get_runway_coord(). In this sample, it is used to set up the initial condition lat, long, alt.
In addition, some optional parameters are passed in this tutorial to create the aircraft including, departure_airport, departure_runway, sid, arrival_airport, arrival_runway, star, approach, flight_plan, and cruise_alt. These parameters are used for AirTrafficSim to generate a flight plan.

airtrafficsim_data/environment/FullFlightDemo.py
```
# Add aircraft
lat_dep, long_dep, alt_dep = Nav.get_runway_coord("VHHH", "25L")
self.aircraft_full = Aircraft(self.traffic, call_sign="FULL", aircraft_type="A320", flight_phase=FlightPhase.TAKEOFF, configuration=Config.TAKEOFF,
                                lat=lat_dep, long=long_dep, alt=alt_dep, heading=254.0, cas=149.0,
                                fuel_weight=5273.0, payload_weight=12000.0,
                                departure_airport = "VHHH", departure_runway="RW25L", sid = "OCEA2B",
                                arrival_airport="RCTP", arrival_runway="05R", star = "TONG1A", approach = "I05R",
                                flight_plan=["RASSE", "CONGA", "ENVAR", "DADON", "EXTRA", "RENOT"],
                                cruise_alt=37000)
```

Departure/Arrival
The waypoints and related restrictions of a Standard Terminal Arrival Procedure (STAR) and/or Standard Instrument Departure Route (SID) will be generated when the user provides information including airport, runway, and the procedure’s ICAO code.

En-route
Flight_plan and cruise_alt are used to generate the related plan for en-route navigation. flight_plan is a list of en-route waypoints in ICAO code where cruise_alt is the target cruise altitude in feet.

Note
Currently, airway and flight plan in ICAO format is not supported. We are working towards such functionality.
#####
Converting historical data

Apart from manually adding new aircraft to the simulation environment, AirTrafficSim can also automatically convert historical data to generate aircraft in the simulation environment. The ConvertHistoricDemo class in airtrafficsim_demo/environment/ConvertHistoricDemo.py provides a sample to set up such an environment.

Detecting procedures and entry points
AirTrafficSim can detect the arrival and approach procedure of each flight base on historical data files. After detecting the procedures, AirTrafficSim will detect and store the entry position, time, speed, heading, and altitude of each aircraft base on a user-defined rule such as distance to a location.

airtrafficsim_data/environment/ConvertHistoricDemo.py
```
# Location of the historic data
self.historic_data_path = Path(__file__).parent.parent.resolve().joinpath('data/flight_data/2018-05-01/')

print("Analyzing flight data")
# Set up arrival and approach data
arrivals_dict, arrival_waypoints_coord_dict = get_arrival_data("VHHH", "07R")
approach_dict, approach_waypoints_coord_dict = get_approach_data("VHHH", "07R")

# Storage for historic aircraft data
self.call_sign = []
self.type = []
self.star = []
self.approach = []
self.position = []
self.speed = []
self.start_alt = []
self.heading = []
self.time = []
self.aircraft_list = {}

# Loop all historic data files
for file in self.historic_data_path.iterdir():
        self.call_sign.append(file.name.removesuffix('.csv'))
        
        # Read and simplify flight trajectory
        df = pd.read_csv(file)
        traj = df[['lat', 'long']].to_numpy()
        simplified = np.array(rdp(traj, 0.005))   

        self.type.append(df['Aircraft_model'].iloc[0])

        # Detect arrival and approach procedures
        arrival_result, arrival_trajectory  = detect_sid_star(simplified, arrivals_dict, arrival_waypoints_coord_dict)
        self.star.append(arrival_result)
        approach_result, approach_trajectory = detect_sid_star(simplified, approach_dict, approach_waypoints_coord_dict)
        self.approach.append(approach_result)

        # Determine aircraft appearance point (150km to hong kong)
        index = np.where(Cal.cal_great_circle_dist(traj[:, 0], traj[:, 1], 22.3193, 114.1694) < 200)[0][0]
        self.position.append(traj[index])
        self.speed.append(df['gspeed'].iloc[index])
        self.start_alt.append(df['alt'].iloc[index])
        self.heading.append(df['hangle'].iloc[index])
        self.time.append(df['timestamp'].iloc[index])

        print(file.name.removesuffix('.csv'), arrival_result, approach_result)

print("Finished analyzing data")

# Get starting time
self.time = np.array(self.time)
```

Adding and deleting aircraft
After converting historical flight data, AirTrafficSim will add aircraft at each timestep based on the stored entry time information. The aircraft will also be deleted if the aircraft has completed its flight plan and there is no next waypoint.

airtrafficsim_data/environment/ConvertHistoricDemo.py
```
def atc_command(self):
    # Handle creation and deletion of aircraft
    time = self.start_time + timedelta(seconds=self.global_time)
    time = int(time.timestamp())
    index = np.where(self.time == time)[0]
    # Add aircraft
    for i in index:
        self.aircraft_list[self.call_sign[i]] = Aircraft(self.traffic, call_sign=self.call_sign[i], aircraft_type=self.type[i], flight_phase=FlightPhase.CRUISE, configuration=Config.CLEAN,
                                                            lat=self.position[i][0], long=self.position[i][1], alt=self.start_alt[i], heading=self.heading[i], cas=self.speed[i], fuel_weight=10000.0, payload_weight=12000.0,
                                                            arrival_airport="VHHH", arrival_runway="07R", star = self.star[i], approach = self.approach[i], cruise_alt=37000)
    # Delete aircraft
    index = self.traffic.index[self.traffic.ap.hv_next_wp == False]
    for i in index:
        self.traffic.del_aircraft(i)
```

Holding and vectoring
A demo program is written to demonstrate commanding aircraft to vectoring and holding.

ConvertHistoricDemo.py
```
# User algorithm
# Holding and vectoring
if "5J150" in self.aircraft_list:
    # self.aircraft_list["5J150"].set_vectoring(60, 195, "GUAVA")
    if self.global_time == 1600:
        self.aircraft_list["5J150"].set_holding(2, "BETTY", "VH")
```
