airtrafficsim.core.aircraft.Aircraft
    __init__(self, traffic: airtrafficsim.core.traffic.Traffic, call_sign, aircraft_type, flight_phase, configuration, lat, long, alt, heading, cas, fuel_weight, payload_weight, departure_airport='', departure_runway='', sid='', arrival_airport='', arrival_runway='', star='', approach='', flight_plan=[], cruise_alt=-1)
    get_alt(self)
    get_cas(self)
    get_fuel_consumed(self)
    get_heading(self)
    get_lat(self)
    get_long(self)
    get_mach(self)
    get_next_wp(self)
    get_vs(self)
    get_wake(self)
    resume_own_navigation(self)
    set_alt(self, alt)
    set_direct(self, waypoint)
    set_heading(self, heading)
    set_holding(self, holding_time, holding_fix, region)
    set_speed(self, speed)
    set_vectoring(self, vectoring_time, v_2, fix)
    set_vs(self, vs)
airtrafficsim.core.environment.Environment
    __init__(self, file_name, start_time, end_time, weather_mode='ISA', performance_mode='BADA')
    atc_command(self)
    export_to_csv(self)
    run(self, socketio=None)
    save(self)
    send_to_client(self, socketio)
    should_end(self)
    step(self, socketio=None)
airtrafficsim.core.traffic.Traffic
    __init__(self, file_name, start_time, end_time, weather_mode, performance_mode)
    add_aircraft(self, call_sign, aircraft_type, flight_phase, configuration, lat, long, alt, heading, cas, fuel_weight, payload_weight, departure_airport, departure_runway, sid, arrival_airport, arrival_runway, star, approach, flight_plan, cruise_alt)
    del_aircraft(self, index)
    update(self, global_time, d_t=1)
