{"system": ["You are a helpful AirTrafficSim coding assistant. Provide strictly the requested code using the AirTrafficSim library.", "The API reference with documentation is below:\nairtrafficsim.core.environment.Environment\n  start_time - The simulation start time [datetime object]\n  end_time - The simulation end time [s]\n  atc_command() - Virtual method to execute user command each timestep.\n  should_end() - Virtual method to determine whether the simulation should end each timestep.\n  step(socketio=None) - Conduct one simulation timestep.\n  run(socketio=None) - Run the simulation for all timesteps.\n  save() - Save all states variable of one timestemp to csv file.\n  export_to_csv() - Export the simulation result to a csv file.\n  send_to_client(socketio) - Send the simulation data to client.\n    socketio - socketio object to handle communciation when running simulation\nairtrafficsim.core.aircraft.Aircraft\n  set_heading(heading) - Set the heading of the aircraft.\n    heading - Heading [deg]\n  set_speed(speed) - Set the speed of the aircraft.\n    speed - Speed [kt]\n  set_vs(vs) - Set vertical speed.\n    vs - Vertical speed [ft/min]\n  set_alt(alt) - Set altitude.\n    alt - Altitude [ft]\n  set_direct(waypoint) - Set direct to a waypoint.\n    waypoint - ICAO code of the waypoint\n  set_holding(holding_time, holding_fix, region) - Set holding procedure.\n    holding_time - How long should the aircraft hold [second]\n    holding_fix - ICAO code of the fix that the aircraft should hold\n    region - ICAO code of the region that the aircraft should hold\n  set_vectoring(vectoring_time, v_2, fix) - Set vectoring procedure.\n    vectoring_time - How long should the aircraft vector [second]\n    v_2 - The target speed speed [kt]\n    fix - ICAO code of the fix that the aircraft go next after vectoring\n  resume_own_navigation() - Resume own navigation to use autopilot instead of user commanded target.\n  get_heading() - Get heading of aircraft.\n  get_cas() - Get Calibrated air speed of aircraft.\n  get_mach() - Get Mach number of aircraft.\n  get_vs() - Get vertical speed of aircraft.\n  get_alt() - Get altitude of aircraft.\n  get_long() - Get longitude of aircraft.\n  get_lat() - Get latitude of aircraft.\n  get_fuel_consumed() - Get the total fuel consumed of aircraft.\n  get_next_wp() - Get next waypoint.\n  get_wake() - Get wake category of aircraft.\nairtrafficsim.core.traffic.Traffic\n  n - Aircraft count\n  index - Index array to indicate whether there is an aircraft active in each index.\n  call_sign - Callsign [string]\n  aircraft_type - Aircraft type in ICAO format [string]\n  configuration - Aircraft configuration [Configuration enum 1: Clean, 2: Take Off, 3: Approach, 4: Landing]\n  flight_phase - Flight phase [Flight_phase enum] (BADA section 3.5)\n  lat - Latitude [deg]\n  long - Longitude [deg]\n  alt - Altitude [ft] Geopotential altitude\n  trans_alt - Transaition altitude [ft]\n  cruise_alt - Cruise altitude [ft]\n  heading - Heading [deg]\n  track_angle - Track angle [deg]\n  bank_angle - Bank angle [deg]\n  path_angle - Path angle [deg]\n  cas - Calibrated air speed [knot]\n  tas - True air speed [knot]\n  gs_north - Ground speed - North[knot]\n  gs_east - Ground speed - East [knot]\n  mach - Mach number [dimensionless]\n  accel - Acceleration [m/s^2]\n  speed_mode - Speed mode [Traffic.speed_mode enum 1: CAS, 2: MACH]\n  max_alt - Maximum altitude [feet]\n  max_cas - Maximum calibrated air speed [knot]\n  max_mach - Maximum mach number [dimensionless]\n  vs - Vertical speed [feet/min]\n  fpa - Flight path angle [deg]\n  vertical_mode - Vertical mode [Vertical mode enum 1: LEVEL, 2: CLIMB, 3: DESCENT]\n  mass - Aircraft mass [kg]\n  empty_weight - Empty weight [kg]\n  fuel_weight - Initial fuel weight [kg]\n  payload_weight - Payload weight [kg]\n  fuel_consumed - Fuel consumped [kg]\n  perf - Performance class\n  ap - Autopilot class\n  weather - Weather class\n  add_aircraft(call_sign, aircraft_type, flight_phase, configuration, lat, long, alt, heading, cas, fuel_weight, payload_weight, departure_airport, departure_runway, sid, arrival_airport, arrival_runway, star, approach, flight_plan, cruise_alt) - Add an aircraft to traffic array.\n  del_aircraft(index) - Delete an aircraft from traffic array.\n    index - Index of an aircraft\n  update(global_time, d_t=1) - Update aircraft state for each timestep given ATC/autopilot command.\n"], "prompts": [{"id": "airtrafficsim0", "content": "Create a simulation environment named EmptySim that starts with time now and lasts 1 minute."}, {"id": "airtrafficsim1", "content": "Simulate an aircraft with call sign N100FE cruising at altitude of 25000 ft above Chicago wit heading due east."}, {"id": "airtrafficsim2", "content": "Simulate a Boeing 737 halfway into flying from Hong Kong to Sydney. 30 seconds into the simulation, the aircraft should climb from 20000 ft to 30000 ft."}, {"id": "airtrafficsim3", "content": "Simulate 100 aircraft with random parameters. The aircraft should have call signs N001ND - N100ND. They should all be flying from and to various major airports in the US. 10 seconds into the simulation, all aircraft should reverse their heading. 20 seconds into the simulation, all aircraft should reverse their heading again."}, {"id": "airtrafficsim4", "content": "I have historical air traffic data stored in CSV files in my_air_traffic_data/. Simulate all the historical air traffic. At each timestep, print the latitude, longitude, altitude, heading, and speed of each aircraft."}, {"id": "airtrafficsim5", "content": ""}, {"id": "airtrafficsim6", "content": ""}, {"id": "airtrafficsim7", "content": ""}, {"id": "airtrafficsim8", "content": ""}, {"id": "airtrafficsim9", "content": ""}]}