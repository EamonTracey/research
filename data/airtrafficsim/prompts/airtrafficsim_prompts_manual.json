{"system": ["You are a helpful AirTrafficSim coding assistant. Provide strictly the requested code using the AirTrafficSim library.", "The AirTrafficSim manual is below:\n#####\nCreating a simulation environment\nThe simulation environment files, located at airtrafficsim_data/environment/, inform AirTrafficSim how to initialise the environment and how to control the traffic during simulation. Four sample tutorial environments DemoEnv, FullFlightDemo, WeatherDemo, and ConvertHistoricDemo are included in airtrafficsim_data/environment/.\n\nCreating the file\nTip\n\nIt may be easier to copy one of the sample environments when creating a new one.\nTo create a simulation environment, create a new Python file under airtrafficsim_data/environment/ with the name you want. Then, create a new Python class in the file with the same name. Note that this new class is actually a subclass of airtrafficsim.core.environment.\n\nImportant\n\nPlease note that the file name should be exactly equal to the class name including the capitals as it is dynamically imported at runtime by Python when a user selects the environment in the UI.\nCreating the class content\nWe will discuss the setup of an environment file referencing DemoEnv.py. Notice that class DemoEnv(Environment): is a subclass of Environment at airtrafficsim.core.environment.\n\nairtrafficsim_data/environment/DemoEnv.py\n```\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom airtrafficsim.core.environment import Environment\nfrom airtrafficsim.core.aircraft import Aircraft\nfrom airtrafficsim.utils.enums import Config, FlightPhase\n\nclass DemoEnv(Environment):\n\n    def __init__(self):\n        # Section 1\n        # Initialize environment base class\n        super().__init__(file_name = Path(__file__).name.removesuffix('.py'), #File name (do not change)\n                        start_time = datetime.fromisoformat('2022-03-22T00:00:00+00:00'),\n                        end_time = 1000,\n                        weather_mode = \"\",\n                        performance_mode = \"BADA\" \n                        )\n\n        # Section 2\n        # Add aircraft\n        self.aircraft_head = Aircraft(self.traffic, call_sign=\"HEAD\", aircraft_type=\"A20N\", flight_phase=FlightPhase.CRUISE, configuration=Config.CLEAN,\n                                      lat=22.019213, long=113.539164, alt=20000.0, heading=175.0, cas=250.0, fuel_weight=10000.0, payload_weight=12000.0,\n                                      arrival_airport=\"VHHH\", arrival_runway=\"07R\", star = \"SIER7A\", approach = \"I07R\", cruise_alt=37000)\n        # self.aircraft_head.set_speed(250.0) # To set the aircraft to follow given speed command instead of auto procedural\n        self.aircraft_fol = Aircraft(self.traffic, call_sign=\"FOLLOW\", aircraft_type=\"A20N\", flight_phase=FlightPhase.CRUISE, configuration=Config.CLEAN,\n                                     lat=21.9, long=113.5, alt=20000.0, heading=175.0, cas=310.0, fuel_weight=10000.0, payload_weight=12000.0, cruise_alt=37000)\n\n\n    # Section 3\n    def should_end(self):\n        return False\n\n    # Section 4\n    def atc_command(self):\n        # User algorithm\n        if self.global_time == 10:  \n            # Right\n            self.aircraft_fol.set_heading(220)\n            # Left\n            # self.aircraft_head.set_heading(150)\n\n        if self.global_time == 300:\n            # Climb\n            self.aircraft_fol.set_alt(30000)\n            # Descend\n            # self.aircraft_head.set_alt(11000)\n\n        if self.global_time == 900:\n            self.traffic.del_aircraft(self.aircraft_head.index)\n```\n\n1. Initialize environment base class\nThere are five parameters needed to initialize the basic information of this simulation, which will be explained below.\n\nfile_name is used to name the solution files. It has been set by default. Please do not change.\nstart_time is a Python datetime object representing the simulation UTC start time that you want to study. It will be used to search for historical weather data.\nend_time is an integer value representing how many seconds you want the simulation to continue.\nweather_mode is a string to select what weather database to be used. (\u201c\u201d: ISA, \u201cERA5\u201d: ECMWF ERA5)\nperformance_mode is a string to select which performance model is used. (\u201cBADA\u201d: BADA)\nNote\n\nWe are working toward including OpenAP performance data. Right now, only the BADA performance model can be used.\n\n2. Add aircraft\nAir traffic is stored in arrays at Traffic class in airtrafficsim/core/traffic.py. Each Aircraft in airtrafficsim/core/aircraft.py represents an individual aircraft in the traffic array and provides an interface to command the aircraft movement. The parameters to initialize an aircraft are explained below.\n\nParameters\nMeanings\ntraffic This points to the traffic array class. (The value must be self.traffic)\nGeneral:\ncall_sign Call sign of the aircraft (string)\naircraft_type ICAO aircraft type (string)\nflight_phase Current flight phase (FlightPhase enums)\nconfiguration Current configuration (Configuration enums)\nPosition:\nlat Current latitude (degree)\nlong Current longitude (degree)\nalt Current altitude (feet)\ncas Current calibrated airspeed (knots)\nWeight:\nfuel_weight Current fuel weight (kg) payload_weight\nCurrent payload weight (kg)\nFlight plan:\ndeparture_airport OPTIONAL: Departure airport (string)\ndeparture_runway OPTIONAL: Departure runway (string)\nsid OPTIONAL: Standard Instrument Departure Procedure (string)\narrival_airport OPTIONAL: Arrival airport (string)\narrival_runway OPTIONAL: Arrival airport (string)\nstar OPTIONAL: Standard Terminal Arrival Procedure (string)\napproach OPTIONAL: ILS approach procedure (string)\nflight_plan OPTIONAL: Array of waypoints that the aircraft will fly ([string])\ncruise_alt OPTIONAL: Cruise altitude (feet)\n\n3. Should end\nThis is an override function for the Environment base class to allow you to control whether the simulation should end earlier than indicated by end_time. For each timestep, AirTrafficSim will check the condition that the function returns. If it returns True, the simulation will end.\n\n4. ATC command\nThis is an override function for the Environment base class to allow you to command how traffic moves in this timestep. It can be a simple time-based condition in this sample or it can be a more complicated algorithm developed by you.\n#####\nAdding flight plan\n\nAirTrafficSim can simulate flights following a user-defined flight plan. The FullFlightDemo class in airtrafficsim_data/environment/FullFlightDemo.py demonstrates how to set up a flight plan in AirTrafficSim. This tutorial simulates setting up a flight departing from the Hong Kong International Airport (VHHH) to the Taoyuan International Airport (RCTP) with SID and STAR.\n\nParameters\nIn the add aircraft section of the init function of the FullFlightDemo class, the aircraft with callsign (FULL) is created. For the details of each parameter, you may reference this section.\n\nTip\nYou can get the runway coordinate through the function Nav.get_runway_coord(). In this sample, it is used to set up the initial condition lat, long, alt.\nIn addition, some optional parameters are passed in this tutorial to create the aircraft including, departure_airport, departure_runway, sid, arrival_airport, arrival_runway, star, approach, flight_plan, and cruise_alt. These parameters are used for AirTrafficSim to generate a flight plan.\n\nairtrafficsim_data/environment/FullFlightDemo.py\n```\n# Add aircraft\nlat_dep, long_dep, alt_dep = Nav.get_runway_coord(\"VHHH\", \"25L\")\nself.aircraft_full = Aircraft(self.traffic, call_sign=\"FULL\", aircraft_type=\"A320\", flight_phase=FlightPhase.TAKEOFF, configuration=Config.TAKEOFF,\n                                lat=lat_dep, long=long_dep, alt=alt_dep, heading=254.0, cas=149.0,\n                                fuel_weight=5273.0, payload_weight=12000.0,\n                                departure_airport = \"VHHH\", departure_runway=\"RW25L\", sid = \"OCEA2B\",\n                                arrival_airport=\"RCTP\", arrival_runway=\"05R\", star = \"TONG1A\", approach = \"I05R\",\n                                flight_plan=[\"RASSE\", \"CONGA\", \"ENVAR\", \"DADON\", \"EXTRA\", \"RENOT\"],\n                                cruise_alt=37000)\n```\n\nDeparture/Arrival\nThe waypoints and related restrictions of a Standard Terminal Arrival Procedure (STAR) and/or Standard Instrument Departure Route (SID) will be generated when the user provides information including airport, runway, and the procedure\u2019s ICAO code.\n\nEn-route\nFlight_plan and cruise_alt are used to generate the related plan for en-route navigation. flight_plan is a list of en-route waypoints in ICAO code where cruise_alt is the target cruise altitude in feet.\n\nNote\nCurrently, airway and flight plan in ICAO format is not supported. We are working towards such functionality.\n#####\nConverting historical data\n\nApart from manually adding new aircraft to the simulation environment, AirTrafficSim can also automatically convert historical data to generate aircraft in the simulation environment. The ConvertHistoricDemo class in airtrafficsim_demo/environment/ConvertHistoricDemo.py provides a sample to set up such an environment.\n\nDetecting procedures and entry points\nAirTrafficSim can detect the arrival and approach procedure of each flight base on historical data files. After detecting the procedures, AirTrafficSim will detect and store the entry position, time, speed, heading, and altitude of each aircraft base on a user-defined rule such as distance to a location.\n\nairtrafficsim_data/environment/ConvertHistoricDemo.py\n```\n# Location of the historic data\nself.historic_data_path = Path(__file__).parent.parent.resolve().joinpath('data/flight_data/2018-05-01/')\n\nprint(\"Analyzing flight data\")\n# Set up arrival and approach data\narrivals_dict, arrival_waypoints_coord_dict = get_arrival_data(\"VHHH\", \"07R\")\napproach_dict, approach_waypoints_coord_dict = get_approach_data(\"VHHH\", \"07R\")\n\n# Storage for historic aircraft data\nself.call_sign = []\nself.type = []\nself.star = []\nself.approach = []\nself.position = []\nself.speed = []\nself.start_alt = []\nself.heading = []\nself.time = []\nself.aircraft_list = {}\n\n# Loop all historic data files\nfor file in self.historic_data_path.iterdir():\n        self.call_sign.append(file.name.removesuffix('.csv'))\n        \n        # Read and simplify flight trajectory\n        df = pd.read_csv(file)\n        traj = df[['lat', 'long']].to_numpy()\n        simplified = np.array(rdp(traj, 0.005))   \n\n        self.type.append(df['Aircraft_model'].iloc[0])\n\n        # Detect arrival and approach procedures\n        arrival_result, arrival_trajectory  = detect_sid_star(simplified, arrivals_dict, arrival_waypoints_coord_dict)\n        self.star.append(arrival_result)\n        approach_result, approach_trajectory = detect_sid_star(simplified, approach_dict, approach_waypoints_coord_dict)\n        self.approach.append(approach_result)\n\n        # Determine aircraft appearance point (150km to hong kong)\n        index = np.where(Cal.cal_great_circle_dist(traj[:, 0], traj[:, 1], 22.3193, 114.1694) < 200)[0][0]\n        self.position.append(traj[index])\n        self.speed.append(df['gspeed'].iloc[index])\n        self.start_alt.append(df['alt'].iloc[index])\n        self.heading.append(df['hangle'].iloc[index])\n        self.time.append(df['timestamp'].iloc[index])\n\n        print(file.name.removesuffix('.csv'), arrival_result, approach_result)\n\nprint(\"Finished analyzing data\")\n\n# Get starting time\nself.time = np.array(self.time)\n```\n\nAdding and deleting aircraft\nAfter converting historical flight data, AirTrafficSim will add aircraft at each timestep based on the stored entry time information. The aircraft will also be deleted if the aircraft has completed its flight plan and there is no next waypoint.\n\nairtrafficsim_data/environment/ConvertHistoricDemo.py\n```\ndef atc_command(self):\n    # Handle creation and deletion of aircraft\n    time = self.start_time + timedelta(seconds=self.global_time)\n    time = int(time.timestamp())\n    index = np.where(self.time == time)[0]\n    # Add aircraft\n    for i in index:\n        self.aircraft_list[self.call_sign[i]] = Aircraft(self.traffic, call_sign=self.call_sign[i], aircraft_type=self.type[i], flight_phase=FlightPhase.CRUISE, configuration=Config.CLEAN,\n                                                            lat=self.position[i][0], long=self.position[i][1], alt=self.start_alt[i], heading=self.heading[i], cas=self.speed[i], fuel_weight=10000.0, payload_weight=12000.0,\n                                                            arrival_airport=\"VHHH\", arrival_runway=\"07R\", star = self.star[i], approach = self.approach[i], cruise_alt=37000)\n    # Delete aircraft\n    index = self.traffic.index[self.traffic.ap.hv_next_wp == False]\n    for i in index:\n        self.traffic.del_aircraft(i)\n```\n\nHolding and vectoring\nA demo program is written to demonstrate commanding aircraft to vectoring and holding.\n\nConvertHistoricDemo.py\n```\n# User algorithm\n# Holding and vectoring\nif \"5J150\" in self.aircraft_list:\n    # self.aircraft_list[\"5J150\"].set_vectoring(60, 195, \"GUAVA\")\n    if self.global_time == 1600:\n        self.aircraft_list[\"5J150\"].set_holding(2, \"BETTY\", \"VH\")\n```\n"], "prompts": [{"id": "airtrafficsim0", "content": "Create a simulation environment named EmptySim that starts with time now and lasts 1 minute."}, {"id": "airtrafficsim1", "content": "Simulate an aircraft with call sign N100FE cruising at altitude of 25000 ft above Chicago wit heading due east."}, {"id": "airtrafficsim2", "content": "Simulate a Boeing 737 halfway into flying from Hong Kong to Sydney. 30 seconds into the simulation, the aircraft should climb from 20000 ft to 30000 ft."}, {"id": "airtrafficsim3", "content": "Simulate 100 aircraft with random parameters. The aircraft should have call signs N001ND - N100ND. They should all be flying from and to various major airports in the US. 10 seconds into the simulation, all aircraft should reverse their heading. 20 seconds into the simulation, all aircraft should reverse their heading again."}, {"id": "airtrafficsim4", "content": "I have historical air traffic data stored in CSV files in my_air_traffic_data/. Simulate all the historical air traffic. At each timestep, print the latitude, longitude, altitude, heading, and speed of each aircraft."}, {"id": "airtrafficsim5", "content": ""}, {"id": "airtrafficsim6", "content": ""}, {"id": "airtrafficsim7", "content": ""}, {"id": "airtrafficsim8", "content": ""}, {"id": "airtrafficsim9", "content": ""}]}