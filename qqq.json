[
    {
        "id": "taskvine0",
        "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\".",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a taskvine application object\napp = vine.Application()\n\n# Define the command to get the current date\ncommand = \"date > current_date\"\n\n# Create a task with the command\ntask = vine.Task(command)\n\n# Add the output file to collect the date\ntask.add_output(\"current_date\")\n\n# Add the task to the application\napp.add_task(task)\n\n# Run the application\napp.run()\n```"
    },
    {
        "id": "taskvine0",
        "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\".",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a taskvine application object\napp = vine.Application()\n\n# Define the command to get the current date\ncommand = \"date > current_date\"\n\n# Create a task with the command\ntask = vine.Task(command)\n\n# Add the output file to collect the date\ntask.add_output(\"current_date\")\n\n# Add the task to the application\napp.add_task(task)\n\n# Run the application\napp.run()\n```"
    },
    {
        "id": "taskvine0",
        "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\".",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a taskvine application object\napp = vine.Application()\n\n# Define the command to get the current date\ncommand = \"date > current_date\"\n\n# Create a task with the command\ntask = vine.Task(command)\n\n# Add the output file to collect the date\ntask.add_output(\"current_date\")\n\n# Add the task to the application\napp.add_task(task)\n\n# Run the application\napp.run()\n```"
    },
    {
        "id": "taskvine1",
        "content": "Write a Python TaskVine application to count the number of times the keywords \"wealth\", \"nation\", \"labour\", \"price\", \"nature\", and \"commodity\" appear in Adam Smith's Wealth of Nations. The text is available at \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\".",
        "response": "```python\nimport requests\nfrom collections import Counter\nfrom ndcctools.taskvine import Manager, Task\n\n# Download the text of Wealth of Nations\nurl = \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\"\nresponse = requests.get(url)\ntext = response.text\n\n# Keywords to search for\nkeywords = [\"wealth\", \"nation\", \"labour\", \"price\", \"nature\", \"commodity\"]\n\n# Function to count occurrences of keywords\ndef count_keywords(text, keywords):\n    text_lower = text.lower()\n    counts = {keyword: text_lower.count(keyword) for keyword in keywords}\n    return counts\n\n# Initialize TaskVine Manager\nwith Manager() as manager:\n    # Define task to count keywords\n    def keyword_count_task():\n        counts = count_keywords(text, keywords)\n        return counts\n\n    # Create and submit task\n    task = Task(keyword_count_task)\n    manager.submit(task)\n\n    # Wait for task to finish and retrieve results\n    result = manager.wait(task)\n    if result.successful():\n        counts = result.output\n        print(\"Keyword counts in Wealth of Nations:\")\n        for keyword, count in counts.items():\n            print(f\"{keyword}: {count}\")\n```\n"
    },
    {
        "id": "taskvine1",
        "content": "Write a Python TaskVine application to count the number of times the keywords \"wealth\", \"nation\", \"labour\", \"price\", \"nature\", and \"commodity\" appear in Adam Smith's Wealth of Nations. The text is available at \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\".",
        "response": "```python\nimport requests\nfrom collections import Counter\nfrom ndcctools.taskvine import Manager, Task\n\n# Download the text of Wealth of Nations\nurl = \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\"\nresponse = requests.get(url)\ntext = response.text\n\n# Keywords to search for\nkeywords = [\"wealth\", \"nation\", \"labour\", \"price\", \"nature\", \"commodity\"]\n\n# Function to count occurrences of keywords\ndef count_keywords(text, keywords):\n    text_lower = text.lower()\n    counts = {keyword: text_lower.count(keyword) for keyword in keywords}\n    return counts\n\n# Initialize TaskVine Manager\nwith Manager() as manager:\n    # Define task to count keywords\n    def keyword_count_task():\n        counts = count_keywords(text, keywords)\n        return counts\n\n    # Create and submit task\n    task = Task(keyword_count_task)\n    manager.submit(task)\n\n    # Wait for task to finish and retrieve results\n    result = manager.wait(task)\n    if result.successful():\n        counts = result.output\n        print(\"Keyword counts in Wealth of Nations:\")\n        for keyword, count in counts.items():\n            print(f\"{keyword}: {count}\")\n```\n"
    },
    {
        "id": "taskvine1",
        "content": "Write a Python TaskVine application to count the number of times the keywords \"wealth\", \"nation\", \"labour\", \"price\", \"nature\", and \"commodity\" appear in Adam Smith's Wealth of Nations. The text is available at \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\".",
        "response": "```python\nimport requests\nfrom collections import Counter\nfrom ndcctools.taskvine import Manager, Task\n\n# Download the text of Wealth of Nations\nurl = \"https://www.gutenberg.org/cache/epub/3300/pg3300.txt\"\nresponse = requests.get(url)\ntext = response.text\n\n# Keywords to search for\nkeywords = [\"wealth\", \"nation\", \"labour\", \"price\", \"nature\", \"commodity\"]\n\n# Function to count occurrences of keywords\ndef count_keywords(text, keywords):\n    text_lower = text.lower()\n    counts = {keyword: text_lower.count(keyword) for keyword in keywords}\n    return counts\n\n# Initialize TaskVine Manager\nwith Manager() as manager:\n    # Define task to count keywords\n    def keyword_count_task():\n        counts = count_keywords(text, keywords)\n        return counts\n\n    # Create and submit task\n    task = Task(keyword_count_task)\n    manager.submit(task)\n\n    # Wait for task to finish and retrieve results\n    result = manager.wait(task)\n    if result.successful():\n        counts = result.output\n        print(\"Keyword counts in Wealth of Nations:\")\n        for keyword, count in counts.items():\n            print(f\"{keyword}: {count}\")\n```\n"
    },
    {
        "id": "taskvine2",
        "content": "Write a Python TaskVine application to run my program \"script.sh\" with various input arguments and organizes all output data. \"script.sh\" takes, as input, an integer and two files. \"script.sh\" outputs a file named \"output{i}.txt\" where \"{i}\" is the input integer. The application must run \"script.sh\" with input integers 1-1000 and input files \"file1.input\" and \"file2.input\" which are stored in the directory \"script_inputs\". The application must store all output files in a directory named \"script_outputs\".",
        "response": "```python\nimport os\nfrom ndcctools.taskvine import Manager, Task\n\n# Create the output directory if it doesn't exist\noutput_dir = \"script_outputs\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Create a manager for TaskVine\nmanager = Manager()\n\n# Define the input files\ninput_file1 = \"script_inputs/file1.input\"\ninput_file2 = \"script_inputs/file2.input\"\n\n# Add the tasks to the manager\nfor i in range(1, 1001):\n    # Define the output file name\n    output_file = f\"output{i}.txt\"\n    \n    # Create a task\n    task = Task(command=f\"./script.sh {i} file1.input file2.input\")\n    \n    # Add the input files to the task\n    task.add_input(input_file1)\n    task.add_input(input_file2)\n    \n    # Specify the expected output file\n    task.specify_output(output_file, os.path.join(output_dir, output_file))\n    \n    # Add the task to the manager\n    manager.add_task(task)\n\n# Wait for all tasks to complete\nmanager.wait_for_all()\n```"
    },
    {
        "id": "taskvine2",
        "content": "Write a Python TaskVine application to run my program \"script.sh\" with various input arguments and organizes all output data. \"script.sh\" takes, as input, an integer and two files. \"script.sh\" outputs a file named \"output{i}.txt\" where \"{i}\" is the input integer. The application must run \"script.sh\" with input integers 1-1000 and input files \"file1.input\" and \"file2.input\" which are stored in the directory \"script_inputs\". The application must store all output files in a directory named \"script_outputs\".",
        "response": "```python\nimport os\nfrom ndcctools.taskvine import Manager, Task\n\n# Create the output directory if it doesn't exist\noutput_dir = \"script_outputs\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Create a manager for TaskVine\nmanager = Manager()\n\n# Define the input files\ninput_file1 = \"script_inputs/file1.input\"\ninput_file2 = \"script_inputs/file2.input\"\n\n# Add the tasks to the manager\nfor i in range(1, 1001):\n    # Define the output file name\n    output_file = f\"output{i}.txt\"\n    \n    # Create a task\n    task = Task(command=f\"./script.sh {i} file1.input file2.input\")\n    \n    # Add the input files to the task\n    task.add_input(input_file1)\n    task.add_input(input_file2)\n    \n    # Specify the expected output file\n    task.specify_output(output_file, os.path.join(output_dir, output_file))\n    \n    # Add the task to the manager\n    manager.add_task(task)\n\n# Wait for all tasks to complete\nmanager.wait_for_all()\n```"
    },
    {
        "id": "taskvine2",
        "content": "Write a Python TaskVine application to run my program \"script.sh\" with various input arguments and organizes all output data. \"script.sh\" takes, as input, an integer and two files. \"script.sh\" outputs a file named \"output{i}.txt\" where \"{i}\" is the input integer. The application must run \"script.sh\" with input integers 1-1000 and input files \"file1.input\" and \"file2.input\" which are stored in the directory \"script_inputs\". The application must store all output files in a directory named \"script_outputs\".",
        "response": "```python\nimport os\nfrom ndcctools.taskvine import Manager, Task\n\n# Create the output directory if it doesn't exist\noutput_dir = \"script_outputs\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Create a manager for TaskVine\nmanager = Manager()\n\n# Define the input files\ninput_file1 = \"script_inputs/file1.input\"\ninput_file2 = \"script_inputs/file2.input\"\n\n# Add the tasks to the manager\nfor i in range(1, 1001):\n    # Define the output file name\n    output_file = f\"output{i}.txt\"\n    \n    # Create a task\n    task = Task(command=f\"./script.sh {i} file1.input file2.input\")\n    \n    # Add the input files to the task\n    task.add_input(input_file1)\n    task.add_input(input_file2)\n    \n    # Specify the expected output file\n    task.specify_output(output_file, os.path.join(output_dir, output_file))\n    \n    # Add the task to the manager\n    manager.add_task(task)\n\n# Wait for all tasks to complete\nmanager.wait_for_all()\n```"
    },
    {
        "id": "taskvine3",
        "content": "Write a Python TaskVine application to execute a pipeline of shell scripts. I have the script \"script1.sh\" which outputs a file named \"intermediary.out\" upon completion. I also have the scripts \"script2.sh\" and \"script3.sh\"  which both accept an input file as a command line argument. \"script2.sh\" and \"script3.sh\" must both receive \"intermediary.out\" as the input. Finally, \"script2.sh\" and \"script3.sh\" output files named \"script2.out\" and \"script3.out\", respectively. Save these outputs files on the host machine. \"intermediary.out\" need not be saved to the host machine.",
        "response": "```python\nfrom ndcctools.taskvine import Manager, Task\n\ndef main():\n    manager = Manager()\n\n    # Task 1: Run script1.sh, produces intermediary.out\n    task1 = Task(command=\"./script1.sh\")\n    task1.add_output(\"intermediary.out\")\n    manager.add_task(task1)\n\n    # Task 2: Run script2.sh with intermediary.out as input\n    task2 = Task(command=\"./script2.sh intermediary.out\")\n    task2.add_input(\"intermediary.out\")\n    task2.set_output(\"script2.out\", local=True)\n    manager.add_task(task2)\n\n    # Task 3: Run script3.sh with intermediary.out as input\n    task3 = Task(command=\"./script3.sh intermediary.out\")\n    task3.add_input(\"intermediary.out\")\n    task3.set_output(\"script3.out\", local=True)\n    manager.add_task(task3)\n\n    # Wait for all tasks to complete\n    manager.wait_for_all()\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine3",
        "content": "Write a Python TaskVine application to execute a pipeline of shell scripts. I have the script \"script1.sh\" which outputs a file named \"intermediary.out\" upon completion. I also have the scripts \"script2.sh\" and \"script3.sh\"  which both accept an input file as a command line argument. \"script2.sh\" and \"script3.sh\" must both receive \"intermediary.out\" as the input. Finally, \"script2.sh\" and \"script3.sh\" output files named \"script2.out\" and \"script3.out\", respectively. Save these outputs files on the host machine. \"intermediary.out\" need not be saved to the host machine.",
        "response": "```python\nfrom ndcctools.taskvine import Manager, Task\n\ndef main():\n    manager = Manager()\n\n    # Task 1: Run script1.sh, produces intermediary.out\n    task1 = Task(command=\"./script1.sh\")\n    task1.add_output(\"intermediary.out\")\n    manager.add_task(task1)\n\n    # Task 2: Run script2.sh with intermediary.out as input\n    task2 = Task(command=\"./script2.sh intermediary.out\")\n    task2.add_input(\"intermediary.out\")\n    task2.set_output(\"script2.out\", local=True)\n    manager.add_task(task2)\n\n    # Task 3: Run script3.sh with intermediary.out as input\n    task3 = Task(command=\"./script3.sh intermediary.out\")\n    task3.add_input(\"intermediary.out\")\n    task3.set_output(\"script3.out\", local=True)\n    manager.add_task(task3)\n\n    # Wait for all tasks to complete\n    manager.wait_for_all()\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine3",
        "content": "Write a Python TaskVine application to execute a pipeline of shell scripts. I have the script \"script1.sh\" which outputs a file named \"intermediary.out\" upon completion. I also have the scripts \"script2.sh\" and \"script3.sh\"  which both accept an input file as a command line argument. \"script2.sh\" and \"script3.sh\" must both receive \"intermediary.out\" as the input. Finally, \"script2.sh\" and \"script3.sh\" output files named \"script2.out\" and \"script3.out\", respectively. Save these outputs files on the host machine. \"intermediary.out\" need not be saved to the host machine.",
        "response": "```python\nfrom ndcctools.taskvine import Manager, Task\n\ndef main():\n    manager = Manager()\n\n    # Task 1: Run script1.sh, produces intermediary.out\n    task1 = Task(command=\"./script1.sh\")\n    task1.add_output(\"intermediary.out\")\n    manager.add_task(task1)\n\n    # Task 2: Run script2.sh with intermediary.out as input\n    task2 = Task(command=\"./script2.sh intermediary.out\")\n    task2.add_input(\"intermediary.out\")\n    task2.set_output(\"script2.out\", local=True)\n    manager.add_task(task2)\n\n    # Task 3: Run script3.sh with intermediary.out as input\n    task3 = Task(command=\"./script3.sh intermediary.out\")\n    task3.add_input(\"intermediary.out\")\n    task3.set_output(\"script3.out\", local=True)\n    manager.add_task(task3)\n\n    # Wait for all tasks to complete\n    manager.wait_for_all()\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine4",
        "content": "Write a Python TaskVine application to run my GPU-accelerated program. The program binary is stored at \"./train_demo\". The program requires that the worker machine has the feature \"NVIDIA RTX 4090\". Upon completion, the program outputs \"model.tar.gz\". The output file must be saved to the host machine.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine manager\nmanager = vine.Manager()\n\n# Specify the feature required for the worker\nmanager.require_feature(\"NVIDIA RTX 4090\")\n\n# Define the task\ntask = vine.Task(command=\"./train_demo\")\n\n# Specify the output file to be sent back to the host machine\ntask.output_files = [\"model.tar.gz\"]\n\n# Add the task to the manager\nmanager.add_task(task)\n\n# Wait for the task to complete\nmanager.wait_for_all()\n\n# Shutdown the manager\nmanager.shutdown()\n```"
    },
    {
        "id": "taskvine4",
        "content": "Write a Python TaskVine application to run my GPU-accelerated program. The program binary is stored at \"./train_demo\". The program requires that the worker machine has the feature \"NVIDIA RTX 4090\". Upon completion, the program outputs \"model.tar.gz\". The output file must be saved to the host machine.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine manager\nmanager = vine.Manager()\n\n# Specify the feature required for the worker\nmanager.require_feature(\"NVIDIA RTX 4090\")\n\n# Define the task\ntask = vine.Task(command=\"./train_demo\")\n\n# Specify the output file to be sent back to the host machine\ntask.output_files = [\"model.tar.gz\"]\n\n# Add the task to the manager\nmanager.add_task(task)\n\n# Wait for the task to complete\nmanager.wait_for_all()\n\n# Shutdown the manager\nmanager.shutdown()\n```"
    },
    {
        "id": "taskvine4",
        "content": "Write a Python TaskVine application to run my GPU-accelerated program. The program binary is stored at \"./train_demo\". The program requires that the worker machine has the feature \"NVIDIA RTX 4090\". Upon completion, the program outputs \"model.tar.gz\". The output file must be saved to the host machine.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine manager\nmanager = vine.Manager()\n\n# Specify the feature required for the worker\nmanager.require_feature(\"NVIDIA RTX 4090\")\n\n# Define the task\ntask = vine.Task(command=\"./train_demo\")\n\n# Specify the output file to be sent back to the host machine\ntask.output_files = [\"model.tar.gz\"]\n\n# Add the task to the manager\nmanager.add_task(task)\n\n# Wait for the task to complete\nmanager.wait_for_all()\n\n# Shutdown the manager\nmanager.shutdown()\n```"
    },
    {
        "id": "taskvine5",
        "content": "Write a Python TaskVine application to compile and test my project stored at \"complex_project/\". To compile the project, run the \"make all\" command in the project's root directory. Then, to test the project, run \"make test\". The compilation and test must use at most 4 cores, 1024 MB of memory, and 2048 MB of disk. Enable resource monitoring to track resource usage, but do not terminate the task if it overuses resources. When the task completes, print the task's exit code and standard output. For each resource that the task overused, print the resource and by how much it overused.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Initialize the TaskVine application\n    app = vine.Application()\n\n    # Enable resource monitoring\n    app.enable_resource_monitoring()\n    \n    # Define the compile task\n    compile_task = vine.Task(command=\"make all\", directory=\"complex_project\")\n    compile_task.set_cores(4)\n    compile_task.set_memory(1024)\n    compile_task.set_disk(2048)\n\n    # Define the test task\n    test_task = vine.Task(command=\"make test\", directory=\"complex_project\")\n    test_task.set_cores(4)\n    test_task.set_memory(1024)\n    test_task.set_disk(2048)\n\n    # Add tasks to the application\n    app.add_task(compile_task)\n    app.add_task(test_task)\n\n    # Wait for tasks to complete\n    app.wait()\n\n    # Function to handle task completion\n    def on_task_complete(task):\n        print(f\"Task '{task.get_command()}' completed with exit code {task.get_exit_code()}\")\n        print(\"Standard output:\")\n        print(task.get_stdout())\n\n        # Check resource usage\n        if task.used_cores > task.get_cores():\n            print(f\"Overused cores by {task.used_cores - task.get_cores()}\")\n\n        if task.used_memory > task.get_memory():\n            print(f\"Overused memory by {task.used_memory - task.get_memory()} MB\")\n\n        if task.used_disk > task.get_disk():\n            print(f\"Overused disk by {task.used_disk - task.get_disk()} MB\")\n\n    # Attach the completion handler to the tasks\n    compile_task.on_finished = on_task_complete\n    test_task.on_finished = on_task_complete\n\nif __name__ == \"__main__\":\n    main()\n```\n"
    },
    {
        "id": "taskvine5",
        "content": "Write a Python TaskVine application to compile and test my project stored at \"complex_project/\". To compile the project, run the \"make all\" command in the project's root directory. Then, to test the project, run \"make test\". The compilation and test must use at most 4 cores, 1024 MB of memory, and 2048 MB of disk. Enable resource monitoring to track resource usage, but do not terminate the task if it overuses resources. When the task completes, print the task's exit code and standard output. For each resource that the task overused, print the resource and by how much it overused.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Initialize the TaskVine application\n    app = vine.Application()\n\n    # Enable resource monitoring\n    app.enable_resource_monitoring()\n    \n    # Define the compile task\n    compile_task = vine.Task(command=\"make all\", directory=\"complex_project\")\n    compile_task.set_cores(4)\n    compile_task.set_memory(1024)\n    compile_task.set_disk(2048)\n\n    # Define the test task\n    test_task = vine.Task(command=\"make test\", directory=\"complex_project\")\n    test_task.set_cores(4)\n    test_task.set_memory(1024)\n    test_task.set_disk(2048)\n\n    # Add tasks to the application\n    app.add_task(compile_task)\n    app.add_task(test_task)\n\n    # Wait for tasks to complete\n    app.wait()\n\n    # Function to handle task completion\n    def on_task_complete(task):\n        print(f\"Task '{task.get_command()}' completed with exit code {task.get_exit_code()}\")\n        print(\"Standard output:\")\n        print(task.get_stdout())\n\n        # Check resource usage\n        if task.used_cores > task.get_cores():\n            print(f\"Overused cores by {task.used_cores - task.get_cores()}\")\n\n        if task.used_memory > task.get_memory():\n            print(f\"Overused memory by {task.used_memory - task.get_memory()} MB\")\n\n        if task.used_disk > task.get_disk():\n            print(f\"Overused disk by {task.used_disk - task.get_disk()} MB\")\n\n    # Attach the completion handler to the tasks\n    compile_task.on_finished = on_task_complete\n    test_task.on_finished = on_task_complete\n\nif __name__ == \"__main__\":\n    main()\n```\n"
    },
    {
        "id": "taskvine5",
        "content": "Write a Python TaskVine application to compile and test my project stored at \"complex_project/\". To compile the project, run the \"make all\" command in the project's root directory. Then, to test the project, run \"make test\". The compilation and test must use at most 4 cores, 1024 MB of memory, and 2048 MB of disk. Enable resource monitoring to track resource usage, but do not terminate the task if it overuses resources. When the task completes, print the task's exit code and standard output. For each resource that the task overused, print the resource and by how much it overused.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Initialize the TaskVine application\n    app = vine.Application()\n\n    # Enable resource monitoring\n    app.enable_resource_monitoring()\n    \n    # Define the compile task\n    compile_task = vine.Task(command=\"make all\", directory=\"complex_project\")\n    compile_task.set_cores(4)\n    compile_task.set_memory(1024)\n    compile_task.set_disk(2048)\n\n    # Define the test task\n    test_task = vine.Task(command=\"make test\", directory=\"complex_project\")\n    test_task.set_cores(4)\n    test_task.set_memory(1024)\n    test_task.set_disk(2048)\n\n    # Add tasks to the application\n    app.add_task(compile_task)\n    app.add_task(test_task)\n\n    # Wait for tasks to complete\n    app.wait()\n\n    # Function to handle task completion\n    def on_task_complete(task):\n        print(f\"Task '{task.get_command()}' completed with exit code {task.get_exit_code()}\")\n        print(\"Standard output:\")\n        print(task.get_stdout())\n\n        # Check resource usage\n        if task.used_cores > task.get_cores():\n            print(f\"Overused cores by {task.used_cores - task.get_cores()}\")\n\n        if task.used_memory > task.get_memory():\n            print(f\"Overused memory by {task.used_memory - task.get_memory()} MB\")\n\n        if task.used_disk > task.get_disk():\n            print(f\"Overused disk by {task.used_disk - task.get_disk()} MB\")\n\n    # Attach the completion handler to the tasks\n    compile_task.on_finished = on_task_complete\n    test_task.on_finished = on_task_complete\n\nif __name__ == \"__main__\":\n    main()\n```\n"
    },
    {
        "id": "taskvine6",
        "content": "Write a Python TaskVine application that executes multiple programs with different levels of resource requirements. The two task categories must be named \"intensive\" and \"light\". The \"intensive\" tasks require 8 cores and 16 GB of memory. The \"light\" tasks require 1 core and 2 GB of memory. In the intensive category, submit 10 tasks to execute the shell script \"intensive.sh\". In the light category, submit 100 tasks to execute the shell script \"light.sh\" Print the standard output of each task upon completion.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine application\napp = vine.Application()\n\n# Set an appropriate mode for the application\napp.set_mode(vine.mode.PRODUCTION)\n\n# Define resource requirements for each category\nintensive_cores = 8\nintensive_memory = 16 * 1024  # in MB\nlight_cores = 1\nlight_memory = 2 * 1024  # in MB\n\n# Add intensive tasks\nfor i in range(10):\n    task = vine.Task(command=\"./intensive.sh\")\n    task.set_cores(intensive_cores)\n    task.set_memory(intensive_memory)\n    task_category = \"intensive\"\n    task.tag = f\"{task_category}-task-{i}\"\n    app.add_task(task)\n\n# Add light tasks\nfor i in range(100):\n    task = vine.Task(command=\"./light.sh\")\n    task.set_cores(light_cores)\n    task.set_memory(light_memory)\n    task_category = \"light\"\n    task.tag = f\"{task_category}-task-{i}\"\n    app.add_task(task)\n\n# Set a callback to print the standard output of each task\ndef task_completed_callback(task):\n    print(f\"Task {task.tag} completed with output:\\n{task.stdout.decode()}\")\n\napp.set_task_done_callback(task_completed_callback)\n\n# Run the application\napp.run()\n```"
    },
    {
        "id": "taskvine6",
        "content": "Write a Python TaskVine application that executes multiple programs with different levels of resource requirements. The two task categories must be named \"intensive\" and \"light\". The \"intensive\" tasks require 8 cores and 16 GB of memory. The \"light\" tasks require 1 core and 2 GB of memory. In the intensive category, submit 10 tasks to execute the shell script \"intensive.sh\". In the light category, submit 100 tasks to execute the shell script \"light.sh\" Print the standard output of each task upon completion.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine application\napp = vine.Application()\n\n# Set an appropriate mode for the application\napp.set_mode(vine.mode.PRODUCTION)\n\n# Define resource requirements for each category\nintensive_cores = 8\nintensive_memory = 16 * 1024  # in MB\nlight_cores = 1\nlight_memory = 2 * 1024  # in MB\n\n# Add intensive tasks\nfor i in range(10):\n    task = vine.Task(command=\"./intensive.sh\")\n    task.set_cores(intensive_cores)\n    task.set_memory(intensive_memory)\n    task_category = \"intensive\"\n    task.tag = f\"{task_category}-task-{i}\"\n    app.add_task(task)\n\n# Add light tasks\nfor i in range(100):\n    task = vine.Task(command=\"./light.sh\")\n    task.set_cores(light_cores)\n    task.set_memory(light_memory)\n    task_category = \"light\"\n    task.tag = f\"{task_category}-task-{i}\"\n    app.add_task(task)\n\n# Set a callback to print the standard output of each task\ndef task_completed_callback(task):\n    print(f\"Task {task.tag} completed with output:\\n{task.stdout.decode()}\")\n\napp.set_task_done_callback(task_completed_callback)\n\n# Run the application\napp.run()\n```"
    },
    {
        "id": "taskvine6",
        "content": "Write a Python TaskVine application that executes multiple programs with different levels of resource requirements. The two task categories must be named \"intensive\" and \"light\". The \"intensive\" tasks require 8 cores and 16 GB of memory. The \"light\" tasks require 1 core and 2 GB of memory. In the intensive category, submit 10 tasks to execute the shell script \"intensive.sh\". In the light category, submit 100 tasks to execute the shell script \"light.sh\" Print the standard output of each task upon completion.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\n# Create a TaskVine application\napp = vine.Application()\n\n# Set an appropriate mode for the application\napp.set_mode(vine.mode.PRODUCTION)\n\n# Define resource requirements for each category\nintensive_cores = 8\nintensive_memory = 16 * 1024  # in MB\nlight_cores = 1\nlight_memory = 2 * 1024  # in MB\n\n# Add intensive tasks\nfor i in range(10):\n    task = vine.Task(command=\"./intensive.sh\")\n    task.set_cores(intensive_cores)\n    task.set_memory(intensive_memory)\n    task_category = \"intensive\"\n    task.tag = f\"{task_category}-task-{i}\"\n    app.add_task(task)\n\n# Add light tasks\nfor i in range(100):\n    task = vine.Task(command=\"./light.sh\")\n    task.set_cores(light_cores)\n    task.set_memory(light_memory)\n    task_category = \"light\"\n    task.tag = f\"{task_category}-task-{i}\"\n    app.add_task(task)\n\n# Set a callback to print the standard output of each task\ndef task_completed_callback(task):\n    print(f\"Task {task.tag} completed with output:\\n{task.stdout.decode()}\")\n\napp.set_task_done_callback(task_completed_callback)\n\n# Run the application\napp.run()\n```"
    },
    {
        "id": "taskvine7",
        "content": "Write a Python TaskVine application to perform matrix inversion and transposition. The matrix computations must be defined in Python functions and added to a TaskVine library called \"matrix_library\". The user must specify the size, m x n,  of the matrix and the number of matrices, i, on which to perform computation. The application must randomly generate i matrices and for each matrix, print the matrix, print the inverse matrix, and print the transposed matrix.",
        "response": "```python\nimport numpy as np\nimport random\nimport ndcctools.taskvine as vine\n\ndef generate_matrix(m, n):\n    return np.random.rand(m, n)\n\ndef invert_matrix(matrix):\n    if matrix.shape[0] != matrix.shape[1]:\n        raise ValueError(\"Matrix must be square to invert.\")\n    return np.linalg.inv(matrix)\n\ndef transpose_matrix(matrix):\n    return np.transpose(matrix)\n\ndef main():\n    # Define the parameters\n    m = int(input(\"Enter the number of rows: \"))\n    n = int(input(\"Enter the number of columns: \"))\n    i = int(input(\"Enter the number of matrices: \"))\n\n    # Create a TaskVine library\n    library = vine.Library(\"matrix_library\")\n\n    # Add functions to the library\n    library.add_function(generate_matrix)\n    library.add_function(invert_matrix)\n    library.add_function(transpose_matrix)\n\n    for _ in range(i):\n        # Generate a random matrix\n        matrix = generate_matrix(m, n)\n        print(\"Original Matrix:\")\n        print(matrix)\n\n        # Perform matrix inversion and print\n        if m == n:  # Only attempt to invert if matrix is square\n            try:\n                inverse = invert_matrix(matrix)\n                print(\"Inverse Matrix:\")\n                print(inverse)\n            except ValueError as e:\n                print(e)\n        else:\n            print(\"Matrix is not square, cannot invert.\")\n\n        # Perform matrix transposition and print\n        transpose = transpose_matrix(matrix)\n        print(\"Transposed Matrix:\")\n        print(transpose)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine7",
        "content": "Write a Python TaskVine application to perform matrix inversion and transposition. The matrix computations must be defined in Python functions and added to a TaskVine library called \"matrix_library\". The user must specify the size, m x n,  of the matrix and the number of matrices, i, on which to perform computation. The application must randomly generate i matrices and for each matrix, print the matrix, print the inverse matrix, and print the transposed matrix.",
        "response": "```python\nimport numpy as np\nimport random\nimport ndcctools.taskvine as vine\n\ndef generate_matrix(m, n):\n    return np.random.rand(m, n)\n\ndef invert_matrix(matrix):\n    if matrix.shape[0] != matrix.shape[1]:\n        raise ValueError(\"Matrix must be square to invert.\")\n    return np.linalg.inv(matrix)\n\ndef transpose_matrix(matrix):\n    return np.transpose(matrix)\n\ndef main():\n    # Define the parameters\n    m = int(input(\"Enter the number of rows: \"))\n    n = int(input(\"Enter the number of columns: \"))\n    i = int(input(\"Enter the number of matrices: \"))\n\n    # Create a TaskVine library\n    library = vine.Library(\"matrix_library\")\n\n    # Add functions to the library\n    library.add_function(generate_matrix)\n    library.add_function(invert_matrix)\n    library.add_function(transpose_matrix)\n\n    for _ in range(i):\n        # Generate a random matrix\n        matrix = generate_matrix(m, n)\n        print(\"Original Matrix:\")\n        print(matrix)\n\n        # Perform matrix inversion and print\n        if m == n:  # Only attempt to invert if matrix is square\n            try:\n                inverse = invert_matrix(matrix)\n                print(\"Inverse Matrix:\")\n                print(inverse)\n            except ValueError as e:\n                print(e)\n        else:\n            print(\"Matrix is not square, cannot invert.\")\n\n        # Perform matrix transposition and print\n        transpose = transpose_matrix(matrix)\n        print(\"Transposed Matrix:\")\n        print(transpose)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine7",
        "content": "Write a Python TaskVine application to perform matrix inversion and transposition. The matrix computations must be defined in Python functions and added to a TaskVine library called \"matrix_library\". The user must specify the size, m x n,  of the matrix and the number of matrices, i, on which to perform computation. The application must randomly generate i matrices and for each matrix, print the matrix, print the inverse matrix, and print the transposed matrix.",
        "response": "```python\nimport numpy as np\nimport random\nimport ndcctools.taskvine as vine\n\ndef generate_matrix(m, n):\n    return np.random.rand(m, n)\n\ndef invert_matrix(matrix):\n    if matrix.shape[0] != matrix.shape[1]:\n        raise ValueError(\"Matrix must be square to invert.\")\n    return np.linalg.inv(matrix)\n\ndef transpose_matrix(matrix):\n    return np.transpose(matrix)\n\ndef main():\n    # Define the parameters\n    m = int(input(\"Enter the number of rows: \"))\n    n = int(input(\"Enter the number of columns: \"))\n    i = int(input(\"Enter the number of matrices: \"))\n\n    # Create a TaskVine library\n    library = vine.Library(\"matrix_library\")\n\n    # Add functions to the library\n    library.add_function(generate_matrix)\n    library.add_function(invert_matrix)\n    library.add_function(transpose_matrix)\n\n    for _ in range(i):\n        # Generate a random matrix\n        matrix = generate_matrix(m, n)\n        print(\"Original Matrix:\")\n        print(matrix)\n\n        # Perform matrix inversion and print\n        if m == n:  # Only attempt to invert if matrix is square\n            try:\n                inverse = invert_matrix(matrix)\n                print(\"Inverse Matrix:\")\n                print(inverse)\n            except ValueError as e:\n                print(e)\n        else:\n            print(\"Matrix is not square, cannot invert.\")\n\n        # Perform matrix transposition and print\n        transpose = transpose_matrix(matrix)\n        print(\"Transposed Matrix:\")\n        print(transpose)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine8",
        "content": "Write a Python Taskvine application to fetch the titles of multiple news webpages. The webpage contents must be downloaded asynchronously using the TaskVine futures executor. Print the URL and title of each webpage in order of the completion of each task. The webpages I am interested in are \"https://abcnews.com\", \"https://apnews.com\", \"https://axios.com\", \"https://cnn.com\", \"https://nbcnews.com\", \"https://nytimes.com\", \"https://reuters.com\", \"https://washingtonpost.com\", \"https://wsj.com\".",
        "response": "```python\nimport ndcctools.taskvine as vine\nimport requests\nfrom concurrent.futures import Future\nfrom bs4 import BeautifulSoup\n\n# List of URLs to fetch\nurls = [\n    \"https://abcnews.com\",\n    \"https://apnews.com\",\n    \"https://axios.com\",\n    \"https://cnn.com\",\n    \"https://nbcnews.com\",\n    \"https://nytimes.com\",\n    \"https://reuters.com\",\n    \"https://washingtonpost.com\",\n    \"https://wsj.com\"\n]\n\ndef fetch_title(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.content, 'html.parser')\n        title = soup.title.string if soup.title else 'No title found'\n        return (url, title)\n    except Exception as e:\n        return (url, f\"Error: {str(e)}\")\n\ndef main():\n    with vine.Executor() as executor:\n        # Submit tasks to the executor\n        futures = {executor.submit(fetch_title, url): url for url in urls}\n\n        # Process results as they complete\n        for future in vine.as_completed(futures):\n            url, title = future.result()\n            print(f\"URL: {url}, Title: {title}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n"
    },
    {
        "id": "taskvine8",
        "content": "Write a Python Taskvine application to fetch the titles of multiple news webpages. The webpage contents must be downloaded asynchronously using the TaskVine futures executor. Print the URL and title of each webpage in order of the completion of each task. The webpages I am interested in are \"https://abcnews.com\", \"https://apnews.com\", \"https://axios.com\", \"https://cnn.com\", \"https://nbcnews.com\", \"https://nytimes.com\", \"https://reuters.com\", \"https://washingtonpost.com\", \"https://wsj.com\".",
        "response": "```python\nimport ndcctools.taskvine as vine\nimport requests\nfrom concurrent.futures import Future\nfrom bs4 import BeautifulSoup\n\n# List of URLs to fetch\nurls = [\n    \"https://abcnews.com\",\n    \"https://apnews.com\",\n    \"https://axios.com\",\n    \"https://cnn.com\",\n    \"https://nbcnews.com\",\n    \"https://nytimes.com\",\n    \"https://reuters.com\",\n    \"https://washingtonpost.com\",\n    \"https://wsj.com\"\n]\n\ndef fetch_title(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.content, 'html.parser')\n        title = soup.title.string if soup.title else 'No title found'\n        return (url, title)\n    except Exception as e:\n        return (url, f\"Error: {str(e)}\")\n\ndef main():\n    with vine.Executor() as executor:\n        # Submit tasks to the executor\n        futures = {executor.submit(fetch_title, url): url for url in urls}\n\n        # Process results as they complete\n        for future in vine.as_completed(futures):\n            url, title = future.result()\n            print(f\"URL: {url}, Title: {title}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n"
    },
    {
        "id": "taskvine8",
        "content": "Write a Python Taskvine application to fetch the titles of multiple news webpages. The webpage contents must be downloaded asynchronously using the TaskVine futures executor. Print the URL and title of each webpage in order of the completion of each task. The webpages I am interested in are \"https://abcnews.com\", \"https://apnews.com\", \"https://axios.com\", \"https://cnn.com\", \"https://nbcnews.com\", \"https://nytimes.com\", \"https://reuters.com\", \"https://washingtonpost.com\", \"https://wsj.com\".",
        "response": "```python\nimport ndcctools.taskvine as vine\nimport requests\nfrom concurrent.futures import Future\nfrom bs4 import BeautifulSoup\n\n# List of URLs to fetch\nurls = [\n    \"https://abcnews.com\",\n    \"https://apnews.com\",\n    \"https://axios.com\",\n    \"https://cnn.com\",\n    \"https://nbcnews.com\",\n    \"https://nytimes.com\",\n    \"https://reuters.com\",\n    \"https://washingtonpost.com\",\n    \"https://wsj.com\"\n]\n\ndef fetch_title(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.content, 'html.parser')\n        title = soup.title.string if soup.title else 'No title found'\n        return (url, title)\n    except Exception as e:\n        return (url, f\"Error: {str(e)}\")\n\ndef main():\n    with vine.Executor() as executor:\n        # Submit tasks to the executor\n        futures = {executor.submit(fetch_title, url): url for url in urls}\n\n        # Process results as they complete\n        for future in vine.as_completed(futures):\n            url, title = future.result()\n            print(f\"URL: {url}, Title: {title}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n"
    },
    {
        "id": "taskvine9",
        "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\". To prevent an unwanted worker from connecting to the manager, use the password stored in the file \"taskvine.password\". Further, encrypt communication between the manager and worker with SSL using the \"key.pem\" and \"certificate.pem\" files.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Create a TaskVine manager\n    manager = vine.Manager()\n\n    # Set the password from the file\n    manager.set_password_file(\"taskvine.password\")\n\n    # Enable SSL encryption\n    manager.set_ssl_key_file(\"key.pem\")\n    manager.set_ssl_certificate_file(\"certificate.pem\")\n\n    # Create a task to get the current date\n    task = vine.Task(command=\"date\")\n    task.set_name(\"Get Current Date\")\n\n    # Specify the output file for the task\n    task.set_output(\"current_date\")\n\n    # Add the task to the manager\n    manager.submit(task)\n\n    # Wait for all tasks to complete\n    manager.wait_for_all()\n\n    # Finish the manager\n    manager.finish()\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine9",
        "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\". To prevent an unwanted worker from connecting to the manager, use the password stored in the file \"taskvine.password\". Further, encrypt communication between the manager and worker with SSL using the \"key.pem\" and \"certificate.pem\" files.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Create a TaskVine manager\n    manager = vine.Manager()\n\n    # Set the password from the file\n    manager.set_password_file(\"taskvine.password\")\n\n    # Enable SSL encryption\n    manager.set_ssl_key_file(\"key.pem\")\n    manager.set_ssl_certificate_file(\"certificate.pem\")\n\n    # Create a task to get the current date\n    task = vine.Task(command=\"date\")\n    task.set_name(\"Get Current Date\")\n\n    # Specify the output file for the task\n    task.set_output(\"current_date\")\n\n    # Add the task to the manager\n    manager.submit(task)\n\n    # Wait for all tasks to complete\n    manager.wait_for_all()\n\n    # Finish the manager\n    manager.finish()\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id": "taskvine9",
        "content": "Write a Python TaskVine application to get the current date on a worker machine. The date must be stored to an output file named \"current_date\". To prevent an unwanted worker from connecting to the manager, use the password stored in the file \"taskvine.password\". Further, encrypt communication between the manager and worker with SSL using the \"key.pem\" and \"certificate.pem\" files.",
        "response": "```python\nimport ndcctools.taskvine as vine\n\ndef main():\n    # Create a TaskVine manager\n    manager = vine.Manager()\n\n    # Set the password from the file\n    manager.set_password_file(\"taskvine.password\")\n\n    # Enable SSL encryption\n    manager.set_ssl_key_file(\"key.pem\")\n    manager.set_ssl_certificate_file(\"certificate.pem\")\n\n    # Create a task to get the current date\n    task = vine.Task(command=\"date\")\n    task.set_name(\"Get Current Date\")\n\n    # Specify the output file for the task\n    task.set_output(\"current_date\")\n\n    # Add the task to the manager\n    manager.submit(task)\n\n    # Wait for all tasks to complete\n    manager.wait_for_all()\n\n    # Finish the manager\n    manager.finish()\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]
